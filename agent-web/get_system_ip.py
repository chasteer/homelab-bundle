#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è IP –∞–¥—Ä–µ—Å–∞ —Å–∏—Å—Ç–µ–º—ã
"""

import socket
import requests
import subprocess
import os

def get_local_ip():
    """–ü–æ–ª—É—á–∏—Ç—å –ª–æ–∫–∞–ª—å–Ω—ã–π IP –∞–¥—Ä–µ—Å"""
    try:
        # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å IP —á–µ—Ä–µ–∑ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –≤–Ω–µ—à–Ω–µ–º—É —Å–µ—Ä–≤–∏—Å—É
        s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        s.connect(("8.8.8.8", 80))
        local_ip = s.getsockname()[0]
        s.close()
        return local_ip
    except Exception:
        return None

def get_interface_ip():
    """–ü–æ–ª—É—á–∏—Ç—å IP –∞–¥—Ä–µ—Å –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
    try:
        # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å IP —á–µ—Ä–µ–∑ ip route
        result = subprocess.run(
            ["ip", "route", "get", "8.8.8.8"],
            capture_output=True, text=True, timeout=5
        )
        if result.returncode == 0:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º IP –∏–∑ –≤—ã–≤–æ–¥–∞ –∫–æ–º–∞–Ω–¥—ã
            lines = result.stdout.strip().split()
            for i, word in enumerate(lines):
                if word == "src":
                    return lines[i + 1]
    except Exception:
        pass
    
    return None

def get_external_ip():
    """–ü–æ–ª—É—á–∏—Ç—å –≤–Ω–µ—à–Ω–∏–π IP –∞–¥—Ä–µ—Å"""
    try:
        response = requests.get("https://api.ipify.org", timeout=5)
        if response.status_code == 200:
            return response.text.strip()
    except Exception:
        pass
    
    return None

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üîç –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ IP –∞–¥—Ä–µ—Å–æ–≤ —Å–∏—Å—Ç–µ–º—ã...")
    
    # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ IP –∞–¥—Ä–µ—Å–∞
    local_ip = get_local_ip()
    interface_ip = get_interface_ip()
    external_ip = get_external_ip()
    
    print(f"üì± –õ–æ–∫–∞–ª—å–Ω—ã–π IP: {local_ip or '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω'}")
    print(f"üåê IP –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞: {interface_ip or '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω'}")
    print(f"üåç –í–Ω–µ—à–Ω–∏–π IP: {external_ip or '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω'}")
    
    # –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π IP –¥–ª—è homelab
    recommended_ip = local_ip or interface_ip or "your_local_ip"
    print(f"\nüí° –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π IP –¥–ª—è HOMELAB_HOST: {recommended_ip}")
    
    # –°–æ–∑–¥–∞–µ–º .env —Ñ–∞–π–ª –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    env_file = ".env"
    if not os.path.exists(env_file):
        print(f"\nüìù –°–æ–∑–¥–∞—é —Ñ–∞–π–ª {env_file}...")
        
        env_content = f"""# ===== Homelab Agent .env =====
# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ —Å–∫—Ä–∏–ø—Ç–æ–º get_system_ip.py

# –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
TZ=UTC
DEBUG=false
LOG_LEVEL=INFO

# API –∫–ª—é—á–∏ (–∑–∞–ø–æ–ª–Ω–∏—Ç–µ —Ä–µ–∞–ª—å–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏)
GIGACHAT_CREDENTIALS=your_gigachat_credentials_here
TAVILY_API_KEY=your_tavily_api_key_here
GITHUB_TOKEN=your_github_token_here
GITHUB_WEBHOOK_SECRET=your_github_webhook_secret_here

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
AGENT_DB_PASSWORD=your_secure_password_here

# –°–µ—Ç–µ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
HOMELAB_HOST={recommended_ip}
UPTIME_KUMA_URL=http://{recommended_ip}:3001
AGENT_WEBHOOK_URL=http://{recommended_ip}:8000/api/webhook/uptime-kuma

# VPS –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
VPS_WEBHOOK_URL=https://your_vps_domain.com/api/uptime-alerts

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ RAG
RAG_DB_DIR=/app/data/index

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
LOG_FILE=/app/logs/homelab-agent.log
"""
        
        with open(env_file, "w") as f:
            f.write(env_content)
        
        print(f"‚úÖ –§–∞–π–ª {env_file} —Å–æ–∑–¥–∞–Ω —Å —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏")
        print("üîß –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ —Ñ–∞–π–ª –∏ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ —Ä–µ–∞–ª—å–Ω—ã–µ API –∫–ª—é—á–∏")
    else:
        print(f"\nüìÅ –§–∞–π–ª {env_file} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        print("üîß –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ HOMELAB_HOST –≤ —Ñ–∞–π–ª–µ")
    
    print(f"\nüöÄ –î–ª—è –∑–∞–ø—É—Å–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:")
    print(f"   docker compose up -d")

if __name__ == "__main__":
    main()
