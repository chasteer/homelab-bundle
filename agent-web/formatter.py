"""
–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–æ–≤ Homelab Agent –≤ –∫—Ä–∞—Å–∏–≤–æ–º —Å—Ç–∏–ª–µ
"""

import re
from typing import Dict, Any, List

def format_agent_response(response: str) -> Dict[str, Any]:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç –∞–≥–µ–Ω—Ç–∞ –≤ –∫—Ä–∞—Å–∏–≤–æ–º JSON —Ñ–æ—Ä–º–∞—Ç–µ
    —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ UI –¥–∏–∑–∞–π–Ω–∞
    """
    
    # –û—á–∏—â–∞–µ–º –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
    formatted_text = _clean_and_format_text(response)
    
    # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –±–ª–æ–∫–∏ –¥–ª—è –ª—É—á—à–µ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    blocks = _split_into_blocks(formatted_text)
    
    # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
    formatted_response = {
        "type": "agent_response",
        "content": {
            "text": formatted_text,
            "blocks": blocks,
            "metadata": _extract_metadata(response)
        },
        "styling": {
            "theme": "modern",
            "bubble_style": "gradient",
            "colors": {
                "primary": "#6366f1",
                "secondary": "#8b5cf6", 
                "accent": "#ec4899",
                "success": "#10b981",
                "warning": "#f59e0b",
                "error": "#ef4444"
            }
        }
    }
    
    return formatted_response

def _clean_and_format_text(text: str) -> str:
    """–û—á–∏—â–∞–µ—Ç –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞"""
    
    # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏ –ø–µ—Ä–µ–Ω–æ—Å—ã
    text = re.sub(r'\n{3,}', '\n\n', text)
    text = re.sub(r' +', ' ', text)
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
    text = re.sub(r'^# (.+)$', r'üéØ **\1**', text, flags=re.MULTILINE)
    text = re.sub(r'^## (.+)$', r'üìã **\1**', text, flags=re.MULTILINE)
    text = re.sub(r'^### (.+)$', r'üí° **\1**', text, flags=re.MULTILINE)
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–ø–∏—Å–∫–∏
    text = re.sub(r'^- (.+)$', r'‚Ä¢ \1', text, flags=re.MULTILINE)
    text = re.sub(r'^\* (.+)$', r'‚Ä¢ \1', text, flags=re.MULTILINE)
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∫–æ–¥
    text = re.sub(r'```(\w+)?\n(.*?)\n```', r'üíª **–ö–æ–¥**:\n\2', text, flags=re.DOTALL)
    text = re.sub(r'`([^`]+)`', r'üîß `\1`', text)
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã
    text = re.sub(r'```bash\n(.*?)\n```', r'üñ•Ô∏è **–ö–æ–º–∞–Ω–¥–∞**:\n`\1`', text, flags=re.DOTALL)
    
    # –î–æ–±–∞–≤–ª—è–µ–º —ç–º–æ–¥–∑–∏ –¥–ª—è –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
    text = re.sub(r'\b(–ø–æ–≥–æ–¥–∞|weather)\b', r'üå§Ô∏è \1', text, flags=re.IGNORECASE)
    text = re.sub(r'\b(—Å—Ç–∞—Ç—É—Å|status)\b', r'üìä \1', text, flags=re.IGNORECASE)
    text = re.sub(r'\b(—Å–µ—Ä–≤–∏—Å|service)\b', r'üîß \1', text, flags=re.IGNORECASE)
    text = re.sub(r'\b(–æ—à–∏–±–∫–∞|error)\b', r'‚ùå \1', text, flags=re.IGNORECASE)
    text = re.sub(r'\b(—É—Å–ø–µ—Ö|success)\b', r'‚úÖ \1', text, flags=re.IGNORECASE)
    text = re.sub(r'\b(–Ω–æ–≤–æ—Å—Ç–∏|news)\b', r'üì∞ \1', text, flags=re.IGNORECASE)
    text = re.sub(r'\b(—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏|technology)\b', r'üöÄ \1', text, flags=re.IGNORECASE)
    
    return text.strip()

def _split_into_blocks(text: str) -> List[Dict[str, Any]]:
    """–†–∞–∑–±–∏–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç –Ω–∞ –ª–æ–≥–∏—á–µ—Å–∫–∏–µ –±–ª–æ–∫–∏ –¥–ª—è –ª—É—á—à–µ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    
    blocks = []
    lines = text.split('\n')
    current_block = {"type": "text", "content": []}
    
    for line in lines:
        line = line.strip()
        
        if not line:
            if current_block["content"]:
                blocks.append(current_block)
                current_block = {"type": "text", "content": []}
            continue
            
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –±–ª–æ–∫–∞
        if line.startswith('üéØ') or line.startswith('üìã') or line.startswith('üí°'):
            if current_block["content"]:
                blocks.append(current_block)
            current_block = {"type": "header", "content": [line]}
        elif line.startswith('‚Ä¢'):
            if current_block["type"] != "list":
                if current_block["content"]:
                    blocks.append(current_block)
                current_block = {"type": "list", "content": [line]}
            else:
                current_block["content"].append(line)
        elif line.startswith('üíª') or line.startswith('üñ•Ô∏è'):
            if current_block["content"]:
                blocks.append(current_block)
            current_block = {"type": "code", "content": [line]}
        elif line.startswith('üîß `') and line.endswith('`'):
            if current_block["type"] != "inline_code":
                if current_block["content"]:
                    blocks.append(current_block)
                current_block = {"type": "inline_code", "content": [line]}
            else:
                current_block["content"].append(line)
        else:
            if current_block["type"] != "text":
                if current_block["content"]:
                    blocks.append(current_block)
                current_block = {"type": "text", "content": [line]}
            else:
                current_block["content"].append(line)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –±–ª–æ–∫
    if current_block["content"]:
        blocks.append(current_block)
    
    return blocks

def _extract_metadata(text: str) -> Dict[str, Any]:
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∏–∑ –æ—Ç–≤–µ—Ç–∞"""
    
    metadata = {
        "has_code": "```" in text or "`" in text,
        "has_commands": "bash" in text.lower() or "–∫–æ–º–∞–Ω–¥–∞" in text.lower(),
        "has_lists": any(line.strip().startswith('‚Ä¢') for line in text.split('\n')),
        "word_count": len(text.split()),
        "line_count": len(text.split('\n')),
        "topics": []
    }
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–º—ã
    topics = []
    if any(word in text.lower() for word in ['–ø–æ–≥–æ–¥–∞', 'weather', '—Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞']):
        topics.append("weather")
    if any(word in text.lower() for word in ['—Å–µ—Ä–≤–∏—Å', '—Å—Ç–∞—Ç—É—Å', '–º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥']):
        topics.append("system_status")
    if any(word in text.lower() for word in ['–Ω–æ–≤–æ—Å—Ç–∏', '—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏', 'ai']):
        topics.append("news")
    if any(word in text.lower() for word in ['–∫–æ–¥', '–ø—Ä–æ–≥—Ä–∞–º–º–∞', '—Å–∫—Ä–∏–ø—Ç']):
        topics.append("code")
    
    metadata["topics"] = topics
    
    return metadata

def create_simple_response(response: str, session_id: str) -> Dict[str, Any]:
    """
    –°–æ–∑–¥–∞–µ—Ç –ø—Ä–æ—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –≤ —Å—Ç–∞—Ä–æ–º —Ñ–æ—Ä–º–∞—Ç–µ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    """
    return {
        "response": response,
        "session_id": session_id
    }

def create_enhanced_response(response: str, session_id: str) -> Dict[str, Any]:
    """
    –°–æ–∑–¥–∞–µ—Ç —É–ª—É—á—à–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
    """
    formatted = format_agent_response(response)
    
    return {
        "response": response,  # –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        "formatted": formatted,  # –ù–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
        "session_id": session_id,
        "ui_enhanced": True
    }
