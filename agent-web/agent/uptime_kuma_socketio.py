import os
import json
import time
import socketio
from typing import Dict, List, Optional, Any, Callable
from dotenv import load_dotenv

load_dotenv()

class UptimeKumaSocketIO:
    """Socket.io –∫–ª–∏–µ–Ω—Ç –¥–ª—è Uptime Kuma API"""
    
    def __init__(self):
        self.base_url = os.getenv("UPTIME_KUMA_URL", "http://uptime-kuma:3001")
        self.username = os.getenv("UPTIME_KUMA_USERNAME", "admin")
        self.password = os.getenv("UPTIME_KUMA_PASSWORD", "admin")
        self.api_key = os.getenv("UPTIME_KUMA_API")
        
        # –°–æ–∑–¥–∞–µ–º Socket.io –∫–ª–∏–µ–Ω—Ç
        self.sio = socketio.Client()
        self.connected = False
        self.authenticated = False
        self.monitors = {}
        self.notifications = {}
        self.heartbeats = {}
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
        self._setup_event_handlers()
    
    def _setup_event_handlers(self):
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π Socket.io"""
        
        @self.sio.event
        def connect():
            print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω –∫ Uptime Kuma Socket.io")
            self.connected = True
        
        @self.sio.event
        def disconnect():
            print("‚ùå –û—Ç–∫–ª—é—á–µ–Ω –æ—Ç Uptime Kuma Socket.io")
            self.connected = False
            self.authenticated = False
        
        @self.sio.event
        def connect_error(data):
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Uptime Kuma: {data}")
        
        @self.sio.event
        def login(data):
            if data.get("ok"):
                print("‚úÖ –£—Å–ø–µ—à–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –≤ Uptime Kuma")
                self.authenticated = True
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: {data.get('msg', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
        
        @self.sio.event
        def monitorList(data):
            print(f"üìä –ü–æ–ª—É—á–µ–Ω —Å–ø–∏—Å–æ–∫ –º–æ–Ω–∏—Ç–æ—Ä–æ–≤: {len(data)} –º–æ–Ω–∏—Ç–æ—Ä–æ–≤")
            self.monitors = data
        
        @self.sio.event
        def notificationList(data):
            print(f"üîî –ü–æ–ª—É—á–µ–Ω —Å–ø–∏—Å–æ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {len(data)} —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
            self.notifications = data
        
        @self.sio.event
        def heartbeat(data):
            print(f"üíì –ü–æ–ª—É—á–µ–Ω heartbeat –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∞ {data.get('monitorID')}: {data.get('status')}")
            monitor_id = data.get('monitorID')
            if monitor_id not in self.heartbeats:
                self.heartbeats[monitor_id] = []
            self.heartbeats[monitor_id].append(data)
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ heartbeat'–æ–≤
            if len(self.heartbeats[monitor_id]) > 100:
                self.heartbeats[monitor_id] = self.heartbeats[monitor_id][-50:]
    
    def connect(self) -> bool:
        """–ü–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –∫ Uptime Kuma —á–µ—Ä–µ–∑ Socket.io"""
        try:
            if not self.connected:
                print(f"üîå –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ {self.base_url}")
                self.sio.connect(self.base_url)
                
                # –ñ–¥–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
                timeout = 10
                while not self.connected and timeout > 0:
                    time.sleep(0.1)
                    timeout -= 0.1
                
                if not self.connected:
                    print("‚ùå –¢–∞–π–º–∞—É—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")
                    return False
                
                # –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è - –≤—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–≥–∏–Ω/–ø–∞—Ä–æ–ª—å
                print("üîë –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —á–µ—Ä–µ–∑ –ª–æ–≥–∏–Ω/–ø–∞—Ä–æ–ª—å...")
                self.sio.emit('login', {
                    'username': self.username,
                    'password': self.password
                })
                
                # –ñ–¥–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
                timeout = 30  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –¥–æ 30 —Å–µ–∫—É–Ω–¥
                while not self.authenticated and timeout > 0:
                    time.sleep(0.5)
                    timeout -= 0.5
                    if timeout % 5 == 0:  # –ö–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥ –≤—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç—É—Å
                        print(f"‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏... {timeout:.1f}s")
                
                if not self.authenticated:
                    print("‚ùå –¢–∞–π–º–∞—É—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏")
                    return False
                
                # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
                self.sio.emit('getMonitorList')
                self.sio.emit('getNotificationList')
                
                return True
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {str(e)}")
            return False
    
    def disconnect(self):
        """–û—Ç–∫–ª—é—á–∞–µ—Ç—Å—è –æ—Ç Uptime Kuma"""
        if self.connected:
            self.sio.disconnect()
    
    def get_monitors(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –º–æ–Ω–∏—Ç–æ—Ä–æ–≤"""
        if not self.connected or not self.authenticated:
            if not self.connect():
                return {}
        
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫
        self.sio.emit('getMonitorList')
        time.sleep(1)  # –ñ–¥–µ–º –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
        
        return self.monitors
    
    def get_monitor_by_id(self, monitor_id: int) -> Optional[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∞–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä –ø–æ ID"""
        monitors = self.get_monitors()
        return monitors.get(str(monitor_id))
    
    def get_monitor_heartbeats(self, monitor_id: int, limit: int = 10) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∞–µ—Ç heartbeat –¥–∞–Ω–Ω—ã–µ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∞"""
        if not self.connected or not self.authenticated:
            if not self.connect():
                return []
        
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º heartbeat –¥–∞–Ω–Ω—ã–µ
        self.sio.emit('getHeartbeatList', {'monitorID': monitor_id, 'limit': limit})
        time.sleep(1)  # –ñ–¥–µ–º –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
        
        return self.heartbeats.get(monitor_id, [])[-limit:]
    
    def get_notifications(self) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        if not self.connected or not self.authenticated:
            if not self.connect():
                return []
        
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫
        self.sio.emit('getNotificationList')
        time.sleep(1)  # –ñ–¥–µ–º –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
        
        return list(self.notifications.values()) if isinstance(self.notifications, dict) else self.notifications
    
    def get_uptime_stats(self, monitor_id: int) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É uptime –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∞"""
        if not self.connected or not self.authenticated:
            if not self.connect():
                return {}
        
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É uptime
        self.sio.emit('getUptime', {'monitorID': monitor_id})
        time.sleep(1)  # –ñ–¥–µ–º –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        heartbeats = self.get_monitor_heartbeats(monitor_id, 100)
        if not heartbeats:
            return {}
        
        total_heartbeats = len(heartbeats)
        up_count = sum(1 for hb in heartbeats if hb.get('status') == 1)
        uptime_percentage = (up_count / total_heartbeats * 100) if total_heartbeats > 0 else 0
        
        return {
            'total_heartbeats': total_heartbeats,
            'up_count': up_count,
            'down_count': total_heartbeats - up_count,
            'uptime_percentage': round(uptime_percentage, 2)
        }
    
    def is_connected(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
        return self.connected and self.authenticated

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∏–µ–Ω—Ç–∞
_uptime_kuma_client = None

def get_uptime_kuma_client() -> UptimeKumaSocketIO:
    """–ü–æ–ª—É—á–∞–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∏–µ–Ω—Ç–∞ Uptime Kuma"""
    global _uptime_kuma_client
    if _uptime_kuma_client is None:
        _uptime_kuma_client = UptimeKumaSocketIO()
    return _uptime_kuma_client

def test_uptime_kuma_socketio() -> Dict[str, Any]:
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Uptime Kuma —á–µ—Ä–µ–∑ Socket.io"""
    client = get_uptime_kuma_client()
    
    result = {
        "connected": False,
        "authenticated": False,
        "monitors_count": 0,
        "notifications_count": 0,
        "error": None
    }
    
    try:
        if client.connect():
            result["connected"] = True
            result["authenticated"] = client.authenticated
            
            monitors = client.get_monitors()
            if monitors:
                result["monitors_count"] = len(monitors)
            
            notifications = client.get_notifications()
            if notifications:
                result["notifications_count"] = len(notifications)
            
            # –û—Ç–∫–ª—é—á–∞–µ–º—Å—è –ø–æ—Å–ª–µ —Ç–µ—Å—Ç–∞
            client.disconnect()
            
    except Exception as e:
        result["error"] = str(e)
    
    return result

if __name__ == "__main__":
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º Socket.io –∫–ª–∏–µ–Ω—Ç
    print("üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º Socket.io –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Uptime Kuma...")
    result = test_uptime_kuma_socketio()
    print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {json.dumps(result, indent=2, ensure_ascii=False)}")
