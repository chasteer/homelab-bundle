import json
from typing import Dict, List, Any, Optional
from langchain.tools import tool
from .uptime_kuma_socketio import get_uptime_kuma_client, test_uptime_kuma_socketio

@tool
def get_uptime_kuma_monitors_socketio() -> str:
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –º–æ–Ω–∏—Ç–æ—Ä–æ–≤ –∏–∑ Uptime Kuma —á–µ—Ä–µ–∑ Socket.io API.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–∂–¥–æ–º –º–æ–Ω–∏—Ç–æ—Ä–µ.
    
    Returns:
        str: JSON —Å—Ç—Ä–æ–∫–∞ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –º–æ–Ω–∏—Ç–æ—Ä–∞—Ö
    """
    try:
        client = get_uptime_kuma_client()
        monitors = client.get_monitors()
        
        if not monitors:
            return "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –º–æ–Ω–∏—Ç–æ—Ä–æ–≤ –∏–∑ Uptime Kuma —á–µ—Ä–µ–∑ Socket.io"
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
        formatted_monitors = []
        for monitor_id, monitor_data in monitors.items():
            formatted_monitor = {
                "id": monitor_id,
                "name": monitor_data.get("name", "Unknown"),
                "type": monitor_data.get("type", "Unknown"),
                "url": monitor_data.get("url", "N/A"),
                "hostname": monitor_data.get("hostname", "N/A"),
                "port": monitor_data.get("port", "N/A"),
                "active": monitor_data.get("active", False),
                "interval": monitor_data.get("interval", "N/A"),
                "retryInterval": monitor_data.get("retryInterval", "N/A"),
                "maxretries": monitor_data.get("maxretries", "N/A"),
                "tags": monitor_data.get("tags", []),
                "notificationIDList": monitor_data.get("notificationIDList", {}),
                "accepted_statuscodes": monitor_data.get("accepted_statuscodes_json", "[]"),
                "conditions": monitor_data.get("conditions", "[]")
            }
            formatted_monitors.append(formatted_monitor)
        
        return json.dumps(formatted_monitors, indent=2, ensure_ascii=False)
        
    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–æ–Ω–∏—Ç–æ—Ä–æ–≤ —á–µ—Ä–µ–∑ Socket.io: {str(e)}"

@tool
def get_monitor_details_socketio(monitor_id: int) -> str:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º –º–æ–Ω–∏—Ç–æ—Ä–µ —á–µ—Ä–µ–∑ Socket.io API.
    
    Args:
        monitor_id (int): ID –º–æ–Ω–∏—Ç–æ—Ä–∞
    
    Returns:
        str: JSON —Å—Ç—Ä–æ–∫–∞ —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –º–æ–Ω–∏—Ç–æ—Ä–µ
    """
    try:
        client = get_uptime_kuma_client()
        monitor = client.get_monitor_by_id(monitor_id)
        
        if not monitor:
            return f"‚ùå –ú–æ–Ω–∏—Ç–æ—Ä —Å ID {monitor_id} –Ω–µ –Ω–∞–π–¥–µ–Ω"
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        heartbeats = client.get_monitor_heartbeats(monitor_id, 10)
        uptime_stats = client.get_uptime_stats(monitor_id)
        
        result = {
            "monitor": monitor,
            "recent_heartbeats": heartbeats,
            "uptime_stats": uptime_stats
        }
        
        return json.dumps(result, indent=2, ensure_ascii=False)
        
    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–µ—Ç–∞–ª–µ–π –º–æ–Ω–∏—Ç–æ—Ä–∞ {monitor_id}: {str(e)}"

@tool
def get_monitor_heartbeats_socketio(monitor_id: int, limit: int = 20) -> str:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ heartbeat –¥–∞–Ω–Ω—ã–µ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∞ —á–µ—Ä–µ–∑ Socket.io API.
    
    Args:
        monitor_id (int): ID –º–æ–Ω–∏—Ç–æ—Ä–∞
        limit (int): –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 20)
    
    Returns:
        str: JSON —Å—Ç—Ä–æ–∫–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ heartbeat
    """
    try:
        client = get_uptime_kuma_client()
        heartbeats = client.get_monitor_heartbeats(monitor_id, limit)
        
        if not heartbeats:
            return f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å heartbeat –¥–∞–Ω–Ω—ã–µ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∞ {monitor_id}"
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º heartbeat –¥–∞–Ω–Ω—ã–µ
        formatted_heartbeats = []
        for hb in heartbeats:
            formatted_hb = {
                "monitorID": hb.get("monitorID"),
                "status": hb.get("status"),  # 0=DOWN, 1=UP, 2=PENDING, 3=MAINTENANCE
                "status_text": {0: "DOWN", 1: "UP", 2: "PENDING", 3: "MAINTENANCE"}.get(hb.get("status"), "UNKNOWN"),
                "time": hb.get("time"),
                "localDateTime": hb.get("localDateTime"),
                "msg": hb.get("msg", ""),
                "ping": hb.get("ping"),
                "important": hb.get("important", False),
                "duration": hb.get("duration"),
                "retries": hb.get("retries", 0),
                "downCount": hb.get("downCount", 0)
            }
            formatted_heartbeats.append(formatted_hb)
        
        return json.dumps(formatted_heartbeats, indent=2, ensure_ascii=False)
        
    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ heartbeat –¥–∞–Ω–Ω—ã—Ö: {str(e)}"

@tool
def get_uptime_statistics_socketio(monitor_id: int) -> str:
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É uptime –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∞ —á–µ—Ä–µ–∑ Socket.io API.
    
    Args:
        monitor_id (int): ID –º–æ–Ω–∏—Ç–æ—Ä–∞
    
    Returns:
        str: JSON —Å—Ç—Ä–æ–∫–∞ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π uptime
    """
    try:
        client = get_uptime_kuma_client()
        stats = client.get_uptime_stats(monitor_id)
        
        if not stats:
            return f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É uptime –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∞ {monitor_id}"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        monitor = client.get_monitor_by_id(monitor_id)
        monitor_name = monitor.get("name", f"Monitor {monitor_id}") if monitor else f"Monitor {monitor_id}"
        
        result = {
            "monitor_id": monitor_id,
            "monitor_name": monitor_name,
            "statistics": stats,
            "uptime_percentage": stats.get("uptime_percentage", 0),
            "total_checks": stats.get("total_heartbeats", 0),
            "successful_checks": stats.get("up_count", 0),
            "failed_checks": stats.get("down_count", 0)
        }
        
        return json.dumps(result, indent=2, ensure_ascii=False)
        
    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ uptime: {str(e)}"

@tool
def get_notifications_socketio() -> str:
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏–∑ Uptime Kuma —á–µ—Ä–µ–∑ Socket.io API.
    
    Returns:
        str: JSON —Å—Ç—Ä–æ–∫–∞ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è—Ö
    """
    try:
        client = get_uptime_kuma_client()
        notifications = client.get_notifications()
        
        if not notifications:
            return "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏–∑ Uptime Kuma"
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        formatted_notifications = []
        for notification in notifications:
            formatted_notification = {
                "id": notification.get("id"),
                "name": notification.get("name", "Unknown"),
                "active": notification.get("active", False),
                "isDefault": notification.get("isDefault", False),
                "userID": notification.get("userID"),
                "config": notification.get("config", "{}")
            }
            formatted_notifications.append(formatted_notification)
        
        return json.dumps(formatted_notifications, indent=2, ensure_ascii=False)
        
    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {str(e)}"

@tool
def test_uptime_kuma_socketio_connection() -> str:
    """
    –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Uptime Kuma —á–µ—Ä–µ–∑ Socket.io API.
    
    Returns:
        str: –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Socket.io –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    """
    try:
        result = test_uptime_kuma_socketio()
        
        status = "‚úÖ Socket.io –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç" if result["connected"] else "‚ùå Socket.io –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ"
        auth_status = "‚úÖ –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞" if result["authenticated"] else "‚ùå –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏"
        monitors_info = f"–ú–æ–Ω–∏—Ç–æ—Ä–æ–≤: {result['monitors_count']}" if result["monitors_count"] > 0 else "–ú–æ–Ω–∏—Ç–æ—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
        notifications_info = f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {result['notifications_count']}" if result["notifications_count"] > 0 else "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
        
        response = f"""
üîç **–¢–µ—Å—Ç Socket.io –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Uptime Kuma**

üìä **–°—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è**: {status}
üîë **–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è**: {auth_status}
üìà **–ú–æ–Ω–∏—Ç–æ—Ä—ã**: {monitors_info}
üîî **–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è**: {notifications_info}
üåê **URL**: {client.base_url if 'client' in locals() else '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω'}
"""
        
        if result["error"]:
            response += f"\n‚ùå **–û—à–∏–±–∫–∞**: {result['error']}"
        
        return response
        
    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ Socket.io –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {str(e)}"

@tool
def get_monitoring_dashboard_data() -> str:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–∞—à–±–æ—Ä–¥–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —á–µ—Ä–µ–∑ Socket.io API.
    –í–∫–ª—é—á–∞–µ—Ç –≤—Å–µ –º–æ–Ω–∏—Ç–æ—Ä—ã, –∏—Ö —Å—Ç–∞—Ç—É—Å—ã, —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ heartbeat'—ã.
    
    Returns:
        str: JSON —Å—Ç—Ä–æ–∫–∞ —Å –ø–æ–ª–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –¥–∞—à–±–æ—Ä–¥–∞
    """
    try:
        client = get_uptime_kuma_client()
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
        monitors = client.get_monitors()
        notifications = client.get_notifications()
        
        dashboard_data = {
            "summary": {
                "total_monitors": len(monitors),
                "total_notifications": len(notifications),
                "connection_status": client.is_connected()
            },
            "monitors": [],
            "notifications": notifications
        }
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π –º–æ–Ω–∏—Ç–æ—Ä
        for monitor_id, monitor_data in monitors.items():
            monitor_info = {
                "id": monitor_id,
                "name": monitor_data.get("name", "Unknown"),
                "type": monitor_data.get("type", "Unknown"),
                "url": monitor_data.get("url", "N/A"),
                "active": monitor_data.get("active", False),
                "tags": monitor_data.get("tags", []),
                "recent_heartbeats": client.get_monitor_heartbeats(int(monitor_id), 5),
                "uptime_stats": client.get_uptime_stats(int(monitor_id))
            }
            dashboard_data["monitors"].append(monitor_info)
        
        return json.dumps(dashboard_data, indent=2, ensure_ascii=False)
        
    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –¥–∞—à–±–æ—Ä–¥–∞: {str(e)}"

# –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö Socket.io –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
UPTIME_KUMA_SOCKETIO_TOOLS = [
    get_uptime_kuma_monitors_socketio,
    get_monitor_details_socketio,
    get_monitor_heartbeats_socketio,
    get_uptime_statistics_socketio,
    get_notifications_socketio,
    test_uptime_kuma_socketio_connection,
    get_monitoring_dashboard_data
]
