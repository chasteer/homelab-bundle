import os
import json
from typing import Dict, List, Any, Optional
from langchain.tools import tool
from .uptime_kuma_api import get_uptime_kuma_api, test_uptime_kuma_connection

@tool
def get_uptime_kuma_monitors() -> str:
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –º–æ–Ω–∏—Ç–æ—Ä–æ–≤ –∏–∑ Uptime Kuma —á–µ—Ä–µ–∑ API.
    
    Returns:
        str: JSON —Å—Ç—Ä–æ–∫–∞ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –º–æ–Ω–∏—Ç–æ—Ä–∞—Ö
    """
    try:
        api = get_uptime_kuma_api()
        monitors = api.get_monitors()
        
        if monitors is None:
            return "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –º–æ–Ω–∏—Ç–æ—Ä–æ–≤ –∏–∑ Uptime Kuma API"
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
        if isinstance(monitors, dict):
            formatted_monitors = []
            for monitor_name, monitor_data in monitors.items():
                formatted_monitors.append({
                    "name": monitor_data.get("name", "Unknown"),
                    "type": monitor_data.get("type", "Unknown"),
                    "url": monitor_data.get("url", "N/A"),
                    "status": monitor_data.get("status", "Unknown"),
                    "status_text": monitor_data.get("status_text", "Unknown")
                })
            return json.dumps(formatted_monitors, indent=2, ensure_ascii=False)
        else:
            return json.dumps(monitors, indent=2, ensure_ascii=False)
            
    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–æ–Ω–∏—Ç–æ—Ä–æ–≤: {str(e)}"

@tool
def get_uptime_kuma_metrics() -> str:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –º–µ—Ç—Ä–∏–∫–∏ Uptime Kuma –≤ —Ñ–æ—Ä–º–∞—Ç–µ Prometheus.
    
    Returns:
        str: –ú–µ—Ç—Ä–∏–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ Prometheus
    """
    try:
        api = get_uptime_kuma_api()
        metrics = api.get_metrics()
        
        if metrics is None:
            return "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –º–µ—Ç—Ä–∏–∫–∏ –∏–∑ Uptime Kuma API"
        
        if isinstance(metrics, dict) and "content" in metrics:
            return metrics["content"]
        else:
            return str(metrics)
            
    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–µ—Ç—Ä–∏–∫: {str(e)}"

@tool
def test_uptime_kuma_api() -> str:
    """
    –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Uptime Kuma API –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç—É—Å.
    
    Returns:
        str: –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API
    """
    try:
        result = test_uptime_kuma_connection()
        
        status = "‚úÖ API –¥–æ—Å—Ç—É–ø–µ–Ω" if result["connected"] else "‚ùå API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
        monitors_info = f"–ú–æ–Ω–∏—Ç–æ—Ä–æ–≤: {result['monitors_count']}" if result["monitors_count"] > 0 else "–ú–æ–Ω–∏—Ç–æ—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
        
        response = f"""
üîç **–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Uptime Kuma API**

üìä **–°—Ç–∞—Ç—É—Å**: {status}
üìà **–ú–æ–Ω–∏—Ç–æ—Ä—ã**: {monitors_info}
üîë **API –∫–ª—é—á**: {'–ù–∞—Å—Ç—Ä–æ–µ–Ω' if os.getenv('UPTIME_KUMA_API') else '–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'}
üåê **URL**: {os.getenv('UPTIME_KUMA_URL', '–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω')}
"""
        
        if result["error"]:
            response += f"\n‚ùå **–û—à–∏–±–∫–∞**: {result['error']}"
        
        return response
        
    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ API: {str(e)}"

@tool
def get_monitor_badge(monitor_id: int, badge_type: str = "uptime") -> str:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –±–µ–π–¥–∂ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∞.
    
    Args:
        monitor_id (int): ID –º–æ–Ω–∏—Ç–æ—Ä–∞
        badge_type (str): –¢–∏–ø –±–µ–π–¥–∂–∞ (uptime, response, status)
    
    Returns:
        str: URL –±–µ–π–¥–∂–∞ –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
    """
    try:
        api = get_uptime_kuma_api()
        badge = api.get_badge(monitor_id, badge_type)
        
        if badge is None:
            return f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –±–µ–π–¥–∂ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∞ {monitor_id}"
        
        if isinstance(badge, dict) and "content" in badge:
            return badge["content"]
        else:
            return str(badge)
            
    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–µ–π–¥–∂–∞: {str(e)}"

@tool
def get_monitor_heartbeat(monitor_id: int, limit: int = 10) -> str:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ heartbeat –¥–∞–Ω–Ω—ã–µ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∞.
    
    Args:
        monitor_id (int): ID –º–æ–Ω–∏—Ç–æ—Ä–∞
        limit (int): –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 10)
    
    Returns:
        str: JSON —Å—Ç—Ä–æ–∫–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ heartbeat
    """
    try:
        api = get_uptime_kuma_api()
        heartbeats = api.get_heartbeat_data(monitor_id, limit)
        
        if heartbeats is None:
            return f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å heartbeat –¥–∞–Ω–Ω—ã–µ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∞ {monitor_id}"
        
        return json.dumps(heartbeats, indent=2, ensure_ascii=False)
        
    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ heartbeat –¥–∞–Ω–Ω—ã—Ö: {str(e)}"

# –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
UPTIME_KUMA_TOOLS = [
    get_uptime_kuma_monitors,
    get_uptime_kuma_metrics,
    test_uptime_kuma_api,
    get_monitor_badge,
    get_monitor_heartbeat
]
