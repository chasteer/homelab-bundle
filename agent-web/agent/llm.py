import os
from dotenv import load_dotenv
from groq import Groq

# –ò–º–ø–æ—Ä—Ç GigaChat —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
try:
    from langchain_gigachat.chat_models import GigaChat
    GIGACHAT_AVAILABLE = True
except ImportError:
    GigaChat = None
    GIGACHAT_AVAILABLE = False

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

def get_groq():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ Groq LLM"""
    api_key = os.getenv("GROQ_API_KEY")
    if not api_key:
        print("‚ö†Ô∏è –ù–µ –∑–∞–¥–∞–Ω GROQ_API_KEY –≤ –æ–∫—Ä—É–∂–µ–Ω–∏–∏.")
        return None
    
    try:
        from langchain_groq import ChatGroq
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–∫—Å–∏
        proxy_url = os.getenv("PROXY_URL")
        if proxy_url:
            print(f"üåê –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä–æ–∫—Å–∏: {proxy_url}")
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è –ø—Ä–æ–∫—Å–∏
            os.environ['HTTP_PROXY'] = proxy_url
            os.environ['HTTPS_PROXY'] = proxy_url
        
        return ChatGroq(
            groq_api_key=api_key,
            model_name="llama-3.1-8b-instant",
            temperature=0.1,
            max_tokens=4096,
            timeout=30
        )
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Groq: {str(e)}")
        return None

def get_gigachat():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ GigaChat LLM"""
    if not GIGACHAT_AVAILABLE:
        print("‚ö†Ô∏è GigaChat –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (–º–æ–¥—É–ª—å –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω)")
        return None
    
    credentials = os.getenv("GIGACHAT_CREDENTIALS")
    if not credentials:
        print("‚ö†Ô∏è GIGACHAT_CREDENTIALS –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        return None
    
    try:
        return GigaChat(
            credentials=credentials,
            verify_ssl_certs=False,
            scope="GIGACHAT_API_PERS",
            model="GigaChat-2",
            timeout=30,
            max_retries=3
        )
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ GigaChat: {str(e)}")
        return None

def get_openai():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ OpenAI LLM"""
    api_key = os.getenv("OPENAI_API_KEY")
    if not api_key:
        print("‚ö†Ô∏è OPENAI_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        return None
    
    try:
        from langchain_openai import ChatOpenAI
        return ChatOpenAI(
            openai_api_key=api_key,
            model_name="gpt-4o-mini",
            temperature=0.1,
            max_tokens=4096,
            timeout=30
        )
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ OpenAI: {str(e)}")
        return None

def get_llm():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ LLM (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: Groq -> OpenAI -> GigaChat)"""
    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º Groq
    groq_llm = get_groq()
    if groq_llm:
        print("‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è Groq Llama 3.1 8B Instant")
        return groq_llm
    
    # –ï—Å–ª–∏ Groq –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø—Ä–æ–±—É–µ–º OpenAI
    openai_llm = get_openai()
    if openai_llm:
        print("‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è OpenAI GPT-4o-mini")
        return openai_llm
    
    # –ï—Å–ª–∏ OpenAI –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø—Ä–æ–±—É–µ–º GigaChat
    gigachat_llm = get_gigachat()
    if gigachat_llm:
        print("‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è GigaChat")
        return gigachat_llm
    
    print("‚ùå –ù–∏ –æ–¥–∏–Ω LLM –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω")
    print("üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
    print("   1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ GROQ_API_KEY –≤ .env —Ñ–∞–π–ª–µ")
    print("   2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ OPENAI_API_KEY –≤ .env —Ñ–∞–π–ª–µ")
    print("   3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ GIGACHAT_CREDENTIALS –≤ .env —Ñ–∞–π–ª–µ")
    print("   4. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ API –∫–ª—é—á–∏ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã")
    return None

def chat(llm, messages):
    """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —á–∞—Ç–∞ —Å LLM"""
    return llm.invoke(messages)