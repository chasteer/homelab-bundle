"""
–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è Homelab Agent
–í–∫–ª—é—á–∞–µ—Ç: Tavily –ø–æ–∏—Å–∫, Wikipedia, —Å–∏—Å—Ç–µ–º–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, Docker compose –∞–Ω–∞–ª–∏–∑, GitHub
"""

import os
import re
import yaml
from typing import Dict, Any, List
from pathlib import Path
from datetime import datetime

import requests
import json
import re
import ast
from langchain_core.tools import tool
from langchain_community.tools.tavily_search import TavilySearchResults

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Tavily –ø–æ–∏—Å–∫–∞
tavily_search = TavilySearchResults(max_results=5)

@tool
def analyze_code_quality(code: str, language: str = "python") -> str:
    """–ê–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–¥–∞ –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫, —Å—Ç–∏–ª—è –∏ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–π.
    
    Args:
        code: –ò—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        language: –Ø–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è (python, javascript, etc.)
    """
    issues = []
    
    try:
        if language.lower() == "python":
            # –ê–Ω–∞–ª–∏–∑ Python –∫–æ–¥–∞
            issues.extend(_analyze_python_code(code))
        else:
            # –ë–∞–∑–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑ –¥–ª—è –¥—Ä—É–≥–∏—Ö —è–∑—ã–∫–æ–≤
            issues.extend(_analyze_generic_code(code))
            
        if not issues:
            return "‚úÖ –ö–æ–¥ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º"
        
        result = "üîç **–ù–∞–π–¥–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã:**\n\n"
        for i, issue in enumerate(issues, 1):
            result += f"{i}. **{issue['type']}** (—Å—Ç—Ä–æ–∫–∞ {issue.get('line', '?')}): {issue['message']}\n"
            if issue.get('suggestion'):
                result += f"   üí° **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è**: {issue['suggestion']}\n"
            result += "\n"
        
        return result
        
    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∫–æ–¥–∞: {str(e)}"


def _analyze_python_code(code: str) -> List[Dict[str, Any]]:
    """–ê–Ω–∞–ª–∏–∑ Python –∫–æ–¥–∞ –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç –ø—Ä–æ–±–ª–µ–º"""
    issues = []
    lines = code.split('\n')
    
    for i, line in enumerate(lines, 1):
        line = line.strip()
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è
        if re.search(r'except\s*:', line):
            issues.append({
                'type': '–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞',
                'line': i,
                'message': '–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ - –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ç–∏–ø –∏—Å–∫–ª—é—á–µ–Ω–∏—è',
                'suggestion': '–ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ except SpecificException: –∏–ª–∏ except Exception as e:'
            })
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ bare except
        if re.search(r'except\s*$', line):
            issues.append({
                'type': '–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞',
                'line': i,
                'message': 'Bare except - –ø–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è –≤–∫–ª—é—á–∞—è KeyboardInterrupt',
                'suggestion': '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ except Exception: –∏–ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ç–∏–ø –∏—Å–∫–ª—é—á–µ–Ω–∏—è'
            })
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ print –≤ –∫–æ–¥–µ (–Ω–µ –≤ –æ—Ç–ª–∞–¥–æ—á–Ω—ã—Ö –±–ª–æ–∫–∞—Ö)
        if re.search(r'print\s*\(', line) and not re.search(r'#\s*debug|#\s*DEBUG', line):
            issues.append({
                'type': '–°—Ç–∏–ª—å –∫–æ–¥–∞',
                'line': i,
                'message': '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ print() –≤ –∫–æ–¥–µ',
                'suggestion': '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ logging –≤–º–µ—Å—Ç–æ print()'
            })
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥–ª–∏–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏
        if len(line) > 120:
            issues.append({
                'type': '–°—Ç–∏–ª—å –∫–æ–¥–∞',
                'line': i,
                'message': f'–°—Ç—Ä–æ–∫–∞ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–∞—è ({len(line)} —Å–∏–º–≤–æ–ª–æ–≤)',
                'suggestion': '–†–∞–∑–±–µ–π—Ç–µ –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–æ–ª–µ–µ –∫–æ—Ä–æ—Ç–∫–∏–µ –∏–º–µ–Ω–∞'
            })
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ PEP 8 –≤ –∏–º–µ–Ω–∞—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
        if re.search(r'[A-Z][a-z]*[A-Z]', line) and not re.search(r'class\s+[A-Z]|def\s+[A-Z]', line):
            camel_case_vars = re.findall(r'\b[a-z]+[A-Z][a-zA-Z]*\b', line)
            for var in camel_case_vars:
                issues.append({
                    'type': '–°—Ç–∏–ª—å –∫–æ–¥–∞',
                    'line': i,
                    'message': f'–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è "{var}" –∏—Å–ø–æ–ª—å–∑—É–µ—Ç camelCase',
                    'suggestion': '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ snake_case: ' + re.sub(r'([a-z])([A-Z])', r'\1_\2', var).lower()
                })
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –º–∞–≥–∏—á–µ—Å–∫–∏–µ —á–∏—Å–ª–∞
        if re.search(r'\b\d{3,}\b', line) and not re.search(r'#\s*port|#\s*timeout|#\s*version', line):
            issues.append({
                'type': '–°—Ç–∏–ª—å –∫–æ–¥–∞',
                'line': i,
                'message': '–ú–∞–≥–∏—á–µ—Å–∫–æ–µ —á–∏—Å–ª–æ –≤ –∫–æ–¥–µ',
                'suggestion': '–í—ã–Ω–µ—Å–∏—Ç–µ –≤ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—É —Å –æ–ø–∏—Å–∞—Ç–µ–ª—å–Ω—ã–º –∏–º–µ–Ω–µ–º'
            })
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞
    try:
        ast.parse(code)
    except SyntaxError as e:
        issues.append({
            'type': '–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞',
            'line': e.lineno,
            'message': f'–°–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e.msg}',
            'suggestion': '–ò—Å–ø—Ä–∞–≤—å—Ç–µ —Å–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫—É—é –æ—à–∏–±–∫—É'
        })
    
    return issues


def _analyze_generic_code(code: str) -> List[Dict[str, Any]]:
    """–ë–∞–∑–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑ –¥–ª—è –¥—Ä—É–≥–∏—Ö —è–∑—ã–∫–æ–≤ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è"""
    issues = []
    lines = code.split('\n')
    
    for i, line in enumerate(lines, 1):
        line = line.strip()
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥–ª–∏–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏
        if len(line) > 120:
            issues.append({
                'type': '–°—Ç–∏–ª—å –∫–æ–¥–∞',
                'line': i,
                'message': f'–°—Ç—Ä–æ–∫–∞ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–∞—è ({len(line)} —Å–∏–º–≤–æ–ª–æ–≤)',
                'suggestion': '–†–∞–∑–±–µ–π—Ç–µ –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫'
            })
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ TODO/FIXME –±–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è
        if re.search(r'(TODO|FIXME|HACK):\s*$', line, re.IGNORECASE):
            issues.append({
                'type': '–°—Ç–∏–ª—å –∫–æ–¥–∞',
                'line': i,
                'message': 'TODO/FIXME –±–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è',
                'suggestion': '–î–æ–±–∞–≤—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≥–æ, —á—Ç–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å'
            })
    
    return issues


@tool
def get_system_info() -> str:
    """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏—Å—Ç–µ–º–µ: –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞, —Ç–µ–∫—É—â–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è."""
    try:
        info = []
        
        # –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        username = os.getenv("USER", "unknown")
        info.append(f"üë§ **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å**: {username}")
        
        # –û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞
        import platform
        system = platform.system()
        version = platform.version()
        machine = platform.machine()
        info.append(f"üíª **–û–°**: {system} {version} ({machine})")
        
        # –¢–µ–∫—É—â–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è
        current_dir = Path.cwd()
        info.append(f"üìÇ **–¢–µ–∫—É—â–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è**: {current_dir}")
        
        # –í—Ä–µ–º—è
        current_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        info.append(f"‚è∞ **–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è**: {current_time}")
        
        return "\n".join(info)
        
    except Exception as e:
        return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–∏—Å—Ç–µ–º–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {str(e)}"


@tool
def docker_compose_lint(yaml_text: str) -> Dict[str, Any]:
    """–ê–Ω–∞–ª–∏–∑ Docker Compose —Ñ–∞–π–ª–∞ –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç –æ—à–∏–±–æ–∫ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π.
    
    Args:
        yaml_text: –°–æ–¥–µ—Ä–∂–∏–º–æ–µ docker-compose.yml —Ñ–∞–π–ª–∞
    """
    issues = []
    warnings = []
    
    try:
        data = yaml.safe_load(yaml_text) or {}
    except Exception as e:
        return {"ok": False, "error": f"YAML parse error: {e}"}
    
    if "services" not in data:
        issues.append("–ù–µ—Ç –∫–ª—é—á–∞ 'services' –≤ compose.")
    else:
        for name, svc in (data.get("services") or {}).items():
            svc = svc or {}
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º restart policy
            if "restart" not in svc:
                warnings.append(f"{name}: —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è 'restart: unless-stopped'")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º healthcheck
            if "healthcheck" not in svc:
                warnings.append(f"{name}: –¥–æ–±–∞–≤—å healthcheck")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º volumes
            if "volumes" not in svc:
                warnings.append(f"{name}: —É–∫–∞–∂–∏ volumes –¥–ª—è –∫–æ–Ω—Ñ–∏–≥–æ–≤/–¥–∞–Ω–Ω—ã—Ö")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Ä—Ç—ã
            for p in svc.get("ports", []) or []:
                if ":" not in str(p):
                    warnings.append(f"{name}: –ø–æ—Ä—Ç '{p}' –ª—É—á—à–µ 'HOST:CONTAINER'")
    
    return {"ok": True, "issues": issues, "warnings": warnings}


@tool
def port_conflict_scan(yaml_texts: List[str]) -> Dict[str, Any]:
    """–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ –ø–æ—Ä—Ç–æ–≤ –≤ Docker Compose —Ñ–∞–π–ª–∞—Ö.
    
    Args:
        yaml_texts: –°–ø–∏—Å–æ–∫ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ docker-compose —Ñ–∞–π–ª–æ–≤
    """
    conflicts = []
    seen = {}
    
    for i, y in enumerate(yaml_texts):
        try:
            data = yaml.safe_load(y) or {}
        except Exception as e:
            conflicts.append(f"–§–∞–π–ª {i}: –æ—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: {e}")
            continue
        
        for name, svc in (data.get("services") or {}).items():
            for p in (svc.get("ports") or []):
                ps = str(p).split(":")
                host = ps[-2] if len(ps) == 3 else ps[0]
                host = host.strip()
                
                if not host or host == "None":
                    continue
                
                if host in seen:
                    conflicts.append(f"–ü–æ—Ä—Ç {host} —É–∂–µ –∑–∞–Ω—è—Ç —Å–µ—Ä–≤–∏—Å–æ–º {seen[host]} (–∫–æ–Ω—Ñ–ª–∏–∫—Ç —Å {name})")
                else:
                    seen[host] = name
    
    return {"conflicts": conflicts}


@tool
def ufw_rule_advisor(services: Dict[str, int], lan_cidr: str = "192.168.0.0/16") -> List[str]:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–∞–≤–∏–ª UFW –¥–ª—è —Å–µ—Ä–≤–∏—Å–æ–≤ homelab.
    
    Args:
        services: –°–ª–æ–≤–∞—Ä—å —Å–µ—Ä–≤–∏—Å–æ–≤ –∏ –∏—Ö –ø–æ—Ä—Ç–æ–≤
        lan_cidr: CIDR –ª–æ–∫–∞–ª—å–Ω–æ–π —Å–µ—Ç–∏
    """
    return [f"sudo ufw allow from {lan_cidr} to any port {port} proto tcp  # {name}" 
            for name, port in services.items()]


@tool
def github_comment_pr(owner: str, repo: str, pr_number: int, comment: str) -> str:
    """–î–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ pull request –≤ GitHub.
    
    Args:
        owner: –í–ª–∞–¥–µ–ª–µ—Ü —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
        repo: –ù–∞–∑–≤–∞–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
        pr_number: –ù–æ–º–µ—Ä pull request
        comment: –¢–µ–∫—Å—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
    """
    try:
        github_token = os.getenv("GITHUB_TOKEN")
        if not github_token:
            return "‚ùå –ù–µ –∑–∞–¥–∞–Ω GITHUB_TOKEN –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è"
        
        url = f"https://api.github.com/repos/{owner}/{repo}/issues/{pr_number}/comments"
        headers = {
            "Authorization": f"token {github_token}",
            "Accept": "application/vnd.github.v3+json"
        }
        
        data = {"body": comment}
        
        response = requests.post(url, headers=headers, json=data)
        
        if response.status_code == 201:
            return f"‚úÖ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–æ–±–∞–≤–ª–µ–Ω –∫ PR #{pr_number} –≤ {owner}/{repo}"
        else:
            return f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è: {response.status_code} - {response.text}"
            
    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è: {str(e)}"


@tool
def github_get_pr_files(owner: str, repo: str, pr_number: int) -> str:
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∏–∑–º–µ–Ω–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –≤ pull request.
    
    Args:
        owner: –í–ª–∞–¥–µ–ª–µ—Ü —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
        repo: –ù–∞–∑–≤–∞–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
        pr_number: –ù–æ–º–µ—Ä pull request
    """
    try:
        github_token = os.getenv("GITHUB_TOKEN")
        if not github_token:
            return "‚ùå –ù–µ –∑–∞–¥–∞–Ω GITHUB_TOKEN –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è"
        
        url = f"https://api.github.com/repos/{owner}/{repo}/pulls/{pr_number}/files"
        headers = {
            "Authorization": f"token {github_token}",
            "Accept": "application/vnd.github.v3+json"
        }
        
        response = requests.get(url, headers=headers)
        
        if response.status_code == 200:
            files = response.json()
            
            result = f"üìÅ **–ò–∑–º–µ–Ω–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –≤ PR #{pr_number}:**\n\n"
            
            for file in files:
                filename = file.get('filename', 'Unknown')
                status = file.get('status', 'Unknown')
                additions = file.get('additions', 0)
                deletions = file.get('deletions', 0)
                
                result += f"üìÑ **{filename}**\n"
                result += f"   üìä –°—Ç–∞—Ç—É—Å: {status}\n"
                result += f"   ‚ûï –î–æ–±–∞–≤–ª–µ–Ω–æ: {additions} —Å—Ç—Ä–æ–∫\n"
                result += f"   ‚ûñ –£–¥–∞–ª–µ–Ω–æ: {deletions} —Å—Ç—Ä–æ–∫\n\n"
            
            return result
        else:
            return f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤: {response.status_code} - {response.text}"
            
    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–∞–π–ª–æ–≤ PR: {str(e)}"


@tool
def github_get_file_content(owner: str, repo: str, path: str, ref: str = "main") -> str:
    """–ü–æ–ª—É—á–∏—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ –∏–∑ GitHub —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è.
    
    Args:
        owner: –í–ª–∞–¥–µ–ª–µ—Ü —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
        repo: –ù–∞–∑–≤–∞–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
        path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É
        ref: –í–µ—Ç–∫–∞ –∏–ª–∏ –∫–æ–º–º–∏—Ç (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é main)
    """
    try:
        github_token = os.getenv("GITHUB_TOKEN")
        if not github_token:
            return "‚ùå –ù–µ –∑–∞–¥–∞–Ω GITHUB_TOKEN –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è"
        
        url = f"https://api.github.com/repos/{owner}/{repo}/contents/{path}"
        headers = {
            "Authorization": f"token {github_token}",
            "Accept": "application/vnd.github.v3+json"
        }
        
        params = {"ref": ref}
        response = requests.get(url, headers=headers, params=params)
        
        if response.status_code == 200:
            file_data = response.json()
            
            if file_data.get('type') == 'file':
                import base64
                content = base64.b64decode(file_data['content']).decode('utf-8')
                
                # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
                if len(content) > 10000:
                    content = content[:10000] + "\n... (—Ñ–∞–π–ª –æ–±—Ä–µ–∑–∞–Ω, —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π)"
                
                return f"üìÑ **–°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ {path}:**\n\n```\n{content}\n```"
            else:
                return f"‚ùå {path} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Ñ–∞–π–ª–æ–º"
        else:
            return f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {response.status_code} - {response.text}"
            
    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {str(e)}"


@tool
def github_search(action: str, query: str, owner: str = "", repo: str = "") -> str:
    """–ü–æ–∏—Å–∫ –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏–∑ GitHub: —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏, –∫–æ–¥.
    
    Args:
        action: –î–µ–π—Å—Ç–≤–∏–µ (search_repos, search_users, get_repo_info, search_code)
        query: –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
        owner: –í–ª–∞–¥–µ–ª–µ—Ü —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è (–¥–ª—è get_repo_info)
        repo: –ù–∞–∑–≤–∞–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è (–¥–ª—è get_repo_info)
    """
    try:
        base_url = "https://api.github.com"
        headers = {"Accept": "application/vnd.github.v3+json"}
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω –µ—Å–ª–∏ –µ—Å—Ç—å
        github_token = os.getenv("GITHUB_TOKEN")
        if github_token:
            headers["Authorization"] = f"token {github_token}"
        
        if action == "search_repos":
            url = f"{base_url}/search/repositories"
            params = {"q": query, "sort": "stars", "order": "desc", "per_page": 5}
            response = requests.get(url, headers=headers, params=params)
            
            if response.status_code == 200:
                data = response.json()
                repos = data.get("items", [])
                
                result = f"üîç **–ù–∞–π–¥–µ–Ω–æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤**: {data.get('total_count', 0)}\n\n"
                
                for repo_item in repos[:5]:
                    result += f"üì¶ **{repo_item['full_name']}**\n"
                    result += f"   ‚≠ê {repo_item['stargazers_count']} –∑–≤–µ–∑–¥\n"
                    result += f"   üìù {repo_item['description'] or '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è'}\n"
                    result += f"   üîó {repo_item['html_url']}\n\n"
                
                return result
            else:
                return f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤: {response.status_code}"
        
        elif action == "search_users":
            url = f"{base_url}/search/users"
            params = {"q": query, "sort": "followers", "order": "desc", "per_page": 5}
            response = requests.get(url, headers=headers, params=params)
            
            if response.status_code == 200:
                data = response.json()
                users = data.get("items", [])
                
                result = f"üîç **–ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π**: {data.get('total_count', 0)}\n\n"
                
                for user in users[:5]:
                    result += f"üë§ **{user['login']}**\n"
                    result += f"   üîó {user['html_url']}\n"
                    result += f"   üìä Score: {user['score']}\n\n"
                
                return result
            else:
                return f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {response.status_code}"
        
        elif action == "get_repo_info":
            if not owner or not repo:
                return "‚ùå –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ –Ω—É–∂–Ω—ã –ø–∞—Ä–∞–º–µ—Ç—Ä—ã owner –∏ repo"
            
            url = f"{base_url}/repos/{owner}/{repo}"
            response = requests.get(url, headers=headers)
            
            if response.status_code == 200:
                repo_data = response.json()
                
                result = f"üì¶ **{repo_data['full_name']}**\n\n"
                result += f"üìù **–û–ø–∏—Å–∞–Ω–∏–µ**: {repo_data['description'] or '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è'}\n"
                result += f"‚≠ê **–ó–≤–µ–∑–¥—ã**: {repo_data['stargazers_count']}\n"
                result += f"üç¥ **–§–æ—Ä–∫–∏**: {repo_data['forks_count']}\n"
                result += f"üëÅÔ∏è **–ù–∞–±–ª—é–¥–∞—é—â–∏–µ**: {repo_data['watchers_count']}\n"
                result += f"üìä **–†–∞–∑–º–µ—Ä**: {repo_data['size']} KB\n"
                result += f"üí¨ **–Ø–∑—ã–∫**: {repo_data['language'] or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
                result += f"üîó **URL**: {repo_data['html_url']}\n"
                result += f"üìÖ **–°–æ–∑–¥–∞–Ω**: {repo_data['created_at'][:10]}\n"
                result += f"üîÑ **–û–±–Ω–æ–≤–ª–µ–Ω**: {repo_data['updated_at'][:10]}\n"
                
                return result
            else:
                return f"‚ùå –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π {owner}/{repo} –Ω–µ –Ω–∞–π–¥–µ–Ω"
        
        elif action == "search_code":
            url = f"{base_url}/search/code"
            params = {"q": query, "sort": "indexed", "order": "desc", "per_page": 5}
            response = requests.get(url, headers=headers, params=params)
            
            if response.status_code == 200:
                data = response.json()
                code_results = data.get("items", [])
                
                result = f"üîç **–ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ —Å –∫–æ–¥–æ–º**: {data.get('total_count', 0)}\n\n"
                
                for item in code_results[:5]:
                    result += f"üìÑ **{item['name']}**\n"
                    result += f"   üì¶ {item['repository']['full_name']}\n"
                    result += f"   üîó {item['html_url']}\n\n"
                
                return result
            else:
                return f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∫–æ–¥–∞: {response.status_code}"
        
        else:
            return "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ. –î–æ—Å—Ç—É–ø–Ω—ã–µ: search_repos, search_users, get_repo_info, search_code"
            
    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å GitHub API: {str(e)}"


@tool
def monitor_homelab_services() -> str:
    """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤ homelab: –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä—Ç–æ–≤, —Å—Ç–∞—Ç—É—Å–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤, –ª–æ–≥–æ–≤."""
    try:
        import subprocess
        import json
        
        result = []
        result.append("üîç **–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–µ—Ä–≤–∏—Å–æ–≤ Homelab**\n")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
        try:
            docker_ps = subprocess.run(
                ["docker", "ps", "--format", "table {{.Names}}\t{{.Status}}\t{{.Ports}}"],
                capture_output=True, text=True, timeout=10
            )
            
            if docker_ps.returncode == 0:
                result.append("üê≥ **Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã:**")
                lines = docker_ps.stdout.strip().split('\n')[1:]  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
                for line in lines:
                    if line.strip():
                        result.append(f"   {line}")
            else:
                result.append("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ Docker")
                
        except Exception as e:
            result.append(f"‚ùå –û—à–∏–±–∫–∞ Docker: {str(e)}")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ö–æ—Å—Ç –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
        homelab_host = os.environ.get("HOMELAB_HOST", "localhost")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–æ—Ä—Ç—ã homelab —Å–µ—Ä–≤–∏—Å–æ–≤
        ports_to_check = {
            "torrserver": 8090,
            "immich-server": 2283,
            "vaultwarden": 8081,
            "uptime-kuma": 3001,
            "jellyfin": 8096,
            "homelab-agent": 8000
        }
        
        result.append("\nüåê **–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä—Ç–æ–≤:**")
        for service, port in ports_to_check.items():
            try:
                import socket
                sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
                sock.settimeout(2)
                result_socket = sock.connect_ex((homelab_host, port))
                sock.close()
                
                if result_socket == 0:
                    result.append(f"   ‚úÖ {service}:{port} - –¥–æ—Å—Ç—É–ø–µ–Ω")
                else:
                    result.append(f"   ‚ùå {service}:{port} - –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            except Exception as e:
                result.append(f"   ‚ùì {service}:{port} - –æ—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: {str(e)}")
        
        return "\n".join(result)
        
    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ —Å–µ—Ä–≤–∏—Å–æ–≤: {str(e)}"


@tool
def get_weather_info(city: str) -> str:
    """–ü–æ–ª—É—á–∏—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–≥–æ–¥–µ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º –≥–æ—Ä–æ–¥–µ.
    
    Args:
        city: –ù–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: –ú–æ—Å–∫–≤–∞, –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥, London)
    """
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º Tavily –¥–ª—è –ø–æ–∏—Å–∫–∞ –∞–∫—Ç—É–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–≥–æ–¥–µ
        query = f"–ø–æ–≥–æ–¥–∞ {city} —Å–µ–≥–æ–¥–Ω—è –∞–∫—Ç—É–∞–ª—å–Ω–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –æ—Å–∞–¥–∫–∏"
        result = tavily_search.invoke(query)
        
        if result and "‚ùå" not in result:
            return f"üå§Ô∏è **–ü–æ–≥–æ–¥–∞ –≤ {city}:**\n\n{result}"
        else:
            # –ï—Å–ª–∏ –ø–æ–∏—Å–∫ –Ω–µ –¥–∞–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—è–º–æ–π –ø–æ–∏—Å–∫
            fallback_query = f"weather {city} current temperature conditions"
            fallback_result = tavily_search.invoke(fallback_query)
            return f"üå§Ô∏è **–ü–æ–≥–æ–¥–∞ –≤ {city}:**\n\n{fallback_result}"
            
    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–≥–æ–¥–µ: {str(e)}"


@tool
def monitor_uptime_kuma() -> str:
    """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏–∑ Uptime Kuma –∏ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–æ–≤."""
    try:
        import requests
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –∏–∑ Uptime Kuma
        kuma_url = os.environ.get("UPTIME_KUMA_URL", "http://localhost:3001")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –º–æ–Ω–∏—Ç–æ—Ä–æ–≤
        monitors_response = requests.get(f"{kuma_url}/api/monitor", timeout=10)
        if monitors_response.status_code != 200:
            return f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ Uptime Kuma: {monitors_response.status_code}"
        
        monitors = monitors_response.json()
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        total_monitors = len(monitors)
        down_monitors = [m for m in monitors if m.get('status') == 0]  # 0 = down
        up_monitors = [m for m in monitors if m.get('status') == 1]    # 1 = up
        maintenance_monitors = [m for m in monitors if m.get('status') == 2]  # 2 = maintenance
        
        result = []
        result.append("üìä **–°—Ç–∞—Ç—É—Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ Uptime Kuma**\n")
        result.append(f"üìà **–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–Ω–∏—Ç–æ—Ä–æ–≤:** {total_monitors}")
        result.append(f"‚úÖ **–†–∞–±–æ—Ç–∞—é—Ç:** {len(up_monitors)}")
        result.append(f"‚ùå **–ù–µ —Ä–∞–±–æ—Ç–∞—é—Ç:** {len(down_monitors)}")
        result.append(f"üîß **–í –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–∏:** {len(maintenance_monitors)}")
        
        if down_monitors:
            result.append("\nüö® **–ü–†–û–ë–õ–ï–ú–ù–´–ï –°–ï–†–í–ò–°–´:**")
            for monitor in down_monitors:
                result.append(f"   ‚Ä¢ {monitor.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')} - {monitor.get('url', 'N/A')}")
                result.append(f"     –ü–æ—Å–ª–µ–¥–Ω—è—è –ø—Ä–æ–≤–µ—Ä–∫–∞: {monitor.get('lastCheck', 'N/A')}")
        
        if up_monitors:
            result.append("\n‚úÖ **–†–ê–ë–û–¢–ê–Æ–©–ò–ï –°–ï–†–í–ò–°–´:**")
            for monitor in up_monitors[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
                result.append(f"   ‚Ä¢ {monitor.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
        
        return "\n".join(result)
        
    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ Uptime Kuma: {str(e)}"


@tool
def send_uptime_alert(service_name: str, status: str, details: str) -> str:
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–æ–±–ª–µ–º–µ –≤ Uptime Kuma –Ω–∞ VPS –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏.
    
    Args:
        service_name: –ù–∞–∑–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞ —Å –ø—Ä–æ–±–ª–µ–º–æ–π
        status: –°—Ç–∞—Ç—É—Å (down, error, warning)
        details: –î–µ—Ç–∞–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã
    """
    try:
        import requests
        
        # –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
        alert_data = {
            "source": "homelab_agent",
            "timestamp": datetime.now().isoformat(),
            "service": service_name,
            "status": status,
            "details": details,
            "host": os.environ.get("HOMELAB_HOST", "localhost")
        }
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ VPS
        vps_url = os.environ.get("VPS_WEBHOOK_URL", "https://your_vps_domain.com/api/uptime-alerts")
        
        response = requests.post(
            vps_url,
            json=alert_data,
            headers={"Content-Type": "application/json"},
            timeout=10
        )
        
        if response.status_code == 200:
            return f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ VPS –¥–ª—è —Å–µ—Ä–≤–∏—Å–∞ {service_name}"
        else:
            return f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞ VPS: {response.status_code} - {response.text}"
            
    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {str(e)}"


@tool
def generate_uptime_report() -> str:
    """–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —Å–∏—Å—Ç–µ–º—ã –∏ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏—è –ø–æ —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—é –ø—Ä–æ–±–ª–µ–º."""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        monitoring_data = monitor_uptime_kuma()
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        report = []
        report.append("üìã **–û–¢–ß–ï–¢ –û –°–û–°–¢–û–Ø–ù–ò–ò –°–ò–°–¢–ï–ú–´**\n")
        report.append(monitoring_data)
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ–±–ª–µ–º—ã –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º —Ä–µ—à–µ–Ω–∏—è
        if "‚ùå" in monitoring_data:
            report.append("\nüîß **–†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –£–°–¢–†–ê–ù–ï–ù–ò–Æ:**")
            
            if "uptime-kuma" in monitoring_data.lower():
                report.append("   ‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ª–æ–≥–∏ Uptime Kuma: `docker logs uptime-kuma`")
                report.append("   ‚Ä¢ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä: `docker restart uptime-kuma`")
            
            if "jellyfin" in monitoring_data.lower():
                report.append("   ‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –º–µ–¥–∏–∞-—Ñ–∞–π–ª–æ–≤")
                report.append("   ‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–∞–ø–∫–∞–º")
            
            if "immich" in monitoring_data.lower():
                report.append("   ‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö PostgreSQL")
                report.append("   ‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Redis")
            
            if "vaultwarden" in monitoring_data.lower():
                report.append("   ‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–∞–ø–∫–µ –¥–∞–Ω–Ω—ã—Ö")
                report.append("   ‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é")
            
            report.append("\nüìû **–£–í–ï–î–û–ú–õ–ï–ù–ò–Ø:**")
            report.append("   ‚Ä¢ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ VPS –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
            report.append("   ‚Ä¢ –ë—É–¥–µ—Ç –ø–µ—Ä–µ—Å–ª–∞–Ω–æ –≤ Telegram")
        
        return "\n".join(report)
        
    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞: {str(e)}"


@tool
def analyze_incident_with_llm(incident_data: str) -> str:
    """–ê–Ω–∞–ª–∏–∑ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞ Uptime Kuma —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º LLM –∏ RAG.
    
    Args:
        incident_data: JSON —Å—Ç—Ä–æ–∫–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ –æ–± –∏–Ω—Ü–∏–¥–µ–Ω—Ç–µ (–º–æ–Ω–∏—Ç–æ—Ä, —Å—Ç–∞—Ç—É—Å, —Ç–∏–ø, URL, —Å–æ–æ–±—â–µ–Ω–∏–µ)
    
    Returns:
        –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞ —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏ –ø–æ —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—é
    """
    try:
        import json
        from datetime import datetime
        
        # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞
        data = json.loads(incident_data)
        monitor_name = data.get('monitor_name', 'Unknown')
        status = data.get('status', 'unknown')
        monitor_type = data.get('monitor_type', 'unknown')
        monitor_url = data.get('monitor_url', 'N/A')
        message = data.get('message', 'No message')
        timestamp = data.get('datetime', datetime.now().isoformat())
        
        # –ò—â–µ–º –ø–æ—Ö–æ–∂–∏–µ —Å–ª—É—á–∞–∏ –≤ RAG
        from .rag import query_logs, add_log_to_rag
        
        # –ü–æ–∏—Å–∫ –ø–æ—Ö–æ–∂–∏—Ö –∏–Ω—Ü–∏–¥–µ–Ω—Ç–æ–≤
        similar_incidents = query_logs(f"incident {monitor_name} {status} {monitor_type}", k=3)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è LLM
        context = f"""
–ò–ù–¶–ò–î–ï–ù–¢:
- –ú–æ–Ω–∏—Ç–æ—Ä: {monitor_name}
- –°—Ç–∞—Ç—É—Å: {status}
- –¢–∏–ø: {monitor_type}
- URL: {monitor_url}
- –°–æ–æ–±—â–µ–Ω–∏–µ: {message}
- –í—Ä–µ–º—è: {timestamp}

–ü–û–•–û–ñ–ò–ï –°–õ–£–ß–ê–ò –ò–ó –ò–°–¢–û–†–ò–ò:
"""
        
        if similar_incidents and not similar_incidents[0].get('error'):
            for i, incident in enumerate(similar_incidents, 1):
                context += f"\n{i}. {incident['document'][:200]}..."
        else:
            context += "\n–ü–æ—Ö–æ–∂–∏—Ö —Å–ª—É—á–∞–µ–≤ –≤ –∏—Å—Ç–æ—Ä–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
        context += f"""

–¢–ï–•–ù–ò–ß–ï–°–ö–ò–ô –ö–û–ù–¢–ï–ö–°–¢:
- –¢–∏–ø –º–æ–Ω–∏—Ç–æ—Ä–∞: {monitor_type}
- –í—Ä–µ–º—è –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞: {timestamp}
- –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: {status}

–ü–†–û–°–¨–ë–ê:
–ü—Ä–æ–≤–µ–¥–∏ –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞ –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å:
1. –ê–Ω–∞–ª–∏–∑ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –ø—Ä–∏—á–∏–Ω
2. –ü–æ—à–∞–≥–æ–≤—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—é
3. –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
4. –ü—Ä–æ—Ñ–∏–ª–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –º–µ—Ä—ã
5. –û—Ü–µ–Ω–∫—É —Å–µ—Ä—å–µ–∑–Ω–æ—Å—Ç–∏ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞

–ò—Å–ø–æ–ª—å–∑—É–π —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –æ–ø—ã—Ç –∏ –Ω–∞–π–¥–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —Ç–æ—á–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞.
"""
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∏–Ω—Ü–∏–¥–µ–Ω—Ç –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        incident_log = f"""
–ò–ù–¶–ò–î–ï–ù–¢ UPTIME KUMA:
–ú–æ–Ω–∏—Ç–æ—Ä: {monitor_name}
–°—Ç–∞—Ç—É—Å: {status}
–¢–∏–ø: {monitor_type}
URL: {monitor_url}
–°–æ–æ–±—â–µ–Ω–∏–µ: {message}
–í—Ä–µ–º—è: {timestamp}
–ê–Ω–∞–ª–∏–∑: –ó–∞–ø—Ä–æ—Å –Ω–∞ LLM –∞–Ω–∞–ª–∏–∑
"""
        
        log_metadata = {
            "source": "uptime_kuma_webhook",
            "kind": "incident_analysis",
            "monitor_name": monitor_name,
            "status": status,
            "monitor_type": monitor_type,
            "timestamp": timestamp
        }
        
        add_log_to_rag(incident_log, log_metadata)
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è LLM –∞–Ω–∞–ª–∏–∑–∞
        return f"""
üîç **–ó–ê–ü–†–û–° –ù–ê LLM –ê–ù–ê–õ–ò–ó –ò–ù–¶–ò–î–ï–ù–¢–ê**

üìä **–î–∞–Ω–Ω—ã–µ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞:**
- –ú–æ–Ω–∏—Ç–æ—Ä: {monitor_name}
- –°—Ç–∞—Ç—É—Å: {status}
- –¢–∏–ø: {monitor_type}
- URL: {monitor_url}
- –°–æ–æ–±—â–µ–Ω–∏–µ: {message}
- –í—Ä–µ–º—è: {timestamp}

üìö **–ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:**
{context}

üí° **–°–ª–µ–¥—É—é—â–∏–π —à–∞–≥:** –ò—Å–ø–æ–ª—å–∑—É–π —ç—Ç–æ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ —á–µ—Ä–µ–∑ LLM.
"""
        
    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞: {str(e)}"

@tool
def search_incident_history(query: str) -> str:
    """–ü–æ–∏—Å–∫ –ø–æ –∏—Å—Ç–æ—Ä–∏–∏ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.
    
    Args:
        query: –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
    
    Returns:
        –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –ø–æ –∏—Å—Ç–æ—Ä–∏–∏ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–æ–≤
    """
    try:
        from .rag import query_logs
        
        # –ü–æ–∏—Å–∫ –≤ –ª–æ–≥–∞—Ö
        results = query_logs(query, k=5)
        
        if not results or results[0].get('error'):
            return f"üîç –ü–æ –∑–∞–ø—Ä–æ—Å—É '{query}' –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        response = f"üîç **–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É: '{query}'**\n\n"
        
        for i, result in enumerate(results, 1):
            metadata = result.get('metadata', {})
            content = result.get('document', '')
            
            response += f"**{i}. {metadata.get('source', 'Unknown')}**\n"
            response += f"–¢–∏–ø: {metadata.get('kind', 'Unknown')}\n"
            if metadata.get('monitor_name'):
                response += f"–ú–æ–Ω–∏—Ç–æ—Ä: {metadata['monitor_name']}\n"
            if metadata.get('status'):
                response += f"–°—Ç–∞—Ç—É—Å: {metadata['status']}\n"
            response += f"–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ: {content[:200]}...\n\n"
        
        return response
        
    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ –∏—Å—Ç–æ—Ä–∏–∏: {str(e)}"

@tool
def get_incident_statistics() -> str:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞–º.
    
    Returns:
        –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞–º –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    """
    try:
        from .rag import get_recent_context
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–µ–¥–∞–≤–Ω–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
        recent_context = get_recent_context(k=20)
        
        if not recent_context or recent_context[0].get('error'):
            return "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞."
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
        incident_count = 0
        down_count = 0
        up_count = 0
        monitor_types = {}
        sources = {}
        
        for item in recent_context:
            if item.get('kind') == 'incident_analysis':
                incident_count += 1
                
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
                content = item.get('content', '')
                if 'Status: down' in content:
                    down_count += 1
                elif 'Status: up' in content:
                    up_count += 1
                
                # –¢–∏–ø—ã –º–æ–Ω–∏—Ç–æ—Ä–æ–≤
                if 'docker' in content.lower():
                    monitor_types['docker'] = monitor_types.get('docker', 0) + 1
                elif 'http' in content.lower():
                    monitor_types['http'] = monitor_types.get('http', 0) + 1
                elif 'tcp' in content.lower():
                    monitor_types['tcp'] = monitor_types.get('tcp', 0) + 1
                
                # –ò—Å—Ç–æ—á–Ω–∏–∫–∏
                source = item.get('source', 'unknown')
                sources[source] = sources.get(source, 0) + 1
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats = f"""
üìä **–°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –ò–ù–¶–ò–î–ï–ù–¢–ê–ú**

üî¢ **–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:** {incident_count}
üî¥ **–ü–∞–¥–µ–Ω–∏—è (down):** {down_count}
üü¢ **–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è (up):** {up_count}

üñ•Ô∏è **–¢–∏–ø—ã –º–æ–Ω–∏—Ç–æ—Ä–æ–≤:**
"""
        
        for monitor_type, count in monitor_types.items():
            stats += f"   ‚Ä¢ {monitor_type}: {count}\n"
        
        stats += f"\nüì° **–ò—Å—Ç–æ—á–Ω–∏–∫–∏:**\n"
        
        for source, count in sources.items():
            stats += f"   ‚Ä¢ {source}: {count}\n"
        
        if incident_count > 0:
            uptime_percentage = (up_count / incident_count) * 100
            stats += f"\nüìà **–ü—Ä–æ—Ü–µ–Ω—Ç –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–π:** {uptime_percentage:.1f}%"
        
        return stats
        
    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}"


# –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –∏–º–ø–æ—Ä—Ç–∞
ALL_CUSTOM_TOOLS = [
    analyze_code_quality,
    get_system_info,
    docker_compose_lint,
    port_conflict_scan,
    ufw_rule_advisor,
    github_comment_pr,
    github_get_pr_files,
    github_get_file_content,
    github_search,
    tavily_search,
    get_weather_info,
    monitor_homelab_services,
    monitor_uptime_kuma,
    send_uptime_alert,
    generate_uptime_report,
    analyze_incident_with_llm,
    search_incident_history,
    get_incident_statistics
]
