"""
–í–µ–±—Ö—É–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ—Ç Uptime Kuma
"""

import os
import json
import requests
from datetime import datetime
from fastapi import APIRouter, Request, HTTPException
from pydantic import BaseModel
from typing import Dict, Any, Optional, Union

# –ò–º–ø–æ—Ä—Ç –¥–ª—è LLM –∞–Ω–∞–ª–∏–∑–∞
try:
    from agent.llm import get_gigachat
    from agent.rag import add_log_to_rag
    LLM_AVAILABLE = True
except ImportError:
    LLM_AVAILABLE = False
    print("‚ö†Ô∏è LLM –º–æ–¥—É–ª—å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –±–∞–∑–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑")

router = APIRouter()

class UptimeAlert(BaseModel):
    """–ú–æ–¥–µ–ª—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç Uptime Kuma"""
    monitorID: Optional[int] = None
    monitorURL: Optional[str] = None
    monitorName: Optional[str] = None
    monitorStatus: Optional[int] = None  # 0=down, 1=up, 2=maintenance
    alertType: Optional[str] = None
    alertMessage: Optional[str] = None
    alertDateTime: Optional[str] = None
    monitorType: Optional[str] = None
    monitorHostname: Optional[str] = None
    monitorPort: Optional[int] = None
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –¥–ª—è —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    heartbeat: Optional[Any] = None
    monitor: Optional[Any] = None
    msg: Optional[str] = None

def generate_basic_incident_analysis(monitor_name: str, status: str, details: Dict[str, Any]) -> str:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞ –±–µ–∑ LLM"""
    try:
        analysis = []
        analysis.append(f"üîç **–î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –ò–ù–¶–ò–î–ï–ù–¢–ê: {monitor_name}**")
        analysis.append(f"üìä **–°—Ç–∞—Ç—É—Å:** {status}")
        analysis.append(f"üåê **URL:** {details.get('monitor_url', 'N/A')}")
        analysis.append(f"üñ•Ô∏è **–¢–∏–ø –º–æ–Ω–∏—Ç–æ—Ä–∞:** {details.get('monitor_type', 'N/A')}")
        analysis.append(f"üè† **–•–æ—Å—Ç:** {details.get('hostname', 'N/A')}")
        analysis.append(f"üîå **–ü–æ—Ä—Ç:** {details.get('port', 'N/A')}")
        analysis.append(f"‚è∞ **–í—Ä–µ–º—è –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞:** {details.get('datetime', 'N/A')}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–∞
        if details.get('response_time'):
            analysis.append(f"‚ö° **–í—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞:** {details.get('response_time')}ms")
        if details.get('uptime'):
            analysis.append(f"üìà **Uptime:** {details.get('uptime')}")
        if details.get('down_count'):
            analysis.append(f"üî¥ **–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞–¥–µ–Ω–∏–π:** {details.get('down_count')}")
        
        analysis.append("\nüö® **–í–û–ó–ú–û–ñ–ù–´–ï –ü–†–ò–ß–ò–ù–´:**")
        
        # –î–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –º–æ–Ω–∏—Ç–æ—Ä–∞
        monitor_type = details.get('monitor_type', '').lower()
        if 'http' in monitor_type or 'https' in monitor_type:
            analysis.append("   ‚Ä¢ –í–µ–±-—Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–ª–∏ –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç")
            analysis.append("   ‚Ä¢ –ü—Ä–æ–±–ª–µ–º—ã —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π nginx/apache")
            analysis.append("   ‚Ä¢ –°–µ—Ä–≤–∏—Å —É–ø–∞–ª –∏–ª–∏ –∑–∞–≤–∏—Å")
            analysis.append("   ‚Ä¢ –ü—Ä–æ–±–ª–µ–º—ã —Å SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞–º–∏")
            analysis.append("   ‚Ä¢ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ä–µ—Å—É—Ä—Å–æ–≤ (CPU/RAM)")
        elif 'tcp' in monitor_type:
            analysis.append("   ‚Ä¢ –ü–æ—Ä—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω —Ñ–∞–π—Ä–≤–æ–ª–æ–º")
            analysis.append("   ‚Ä¢ –°–µ—Ä–≤–∏—Å –Ω–µ –∑–∞–ø—É—â–µ–Ω –∏–ª–∏ —É–ø–∞–ª")
            analysis.append("   ‚Ä¢ –ü—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ç–µ–≤—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏")
            analysis.append("   ‚Ä¢ –ö–æ–Ω—Ñ–ª–∏–∫—Ç –ø–æ—Ä—Ç–æ–≤")
        elif 'ping' in monitor_type:
            analysis.append("   ‚Ä¢ –•–æ—Å—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ —Å–µ—Ç–∏")
            analysis.append("   ‚Ä¢ –ü—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ç–µ–≤—ã–º –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ–º")
            analysis.append("   ‚Ä¢ –•–æ—Å—Ç –≤—ã–∫–ª—é—á–µ–Ω –∏–ª–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è")
            analysis.append("   ‚Ä¢ –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ ICMP –ø–∞–∫–µ—Ç–æ–≤")
        elif 'dns' in monitor_type:
            analysis.append("   ‚Ä¢ DNS —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            analysis.append("   ‚Ä¢ –ü—Ä–æ–±–ª–µ–º—ã —Å —Ä–µ–∑–æ–ª–≤–∏–Ω–≥–æ–º –¥–æ–º–µ–Ω–∞")
            analysis.append("   ‚Ä¢ –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è DNS")
        elif 'docker' in monitor_type or 'container' in monitor_type:
            analysis.append("   ‚Ä¢ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —É–ø–∞–ª")
            analysis.append("   ‚Ä¢ –ü—Ä–æ–±–ª–µ–º—ã —Å Docker daemon")
            analysis.append("   ‚Ä¢ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ä–µ—Å—É—Ä—Å–æ–≤ –¥–ª—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞")
            analysis.append("   ‚Ä¢ –ü—Ä–æ–±–ª–µ–º—ã —Å volumes –∏–ª–∏ networks")
        else:
            analysis.append("   ‚Ä¢ –°–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            analysis.append("   ‚Ä¢ –ü—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º")
            analysis.append("   ‚Ä¢ –û—à–∏–±–∫–∏ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
        
        analysis.append("\nüîß **–ü–†–ò–û–†–ò–¢–ï–¢–ù–´–ï –î–ï–ô–°–¢–í–ò–Ø:**")
        
        # –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤
        if 'http' in monitor_type or 'https' in monitor_type:
            analysis.append("   1. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞: `systemctl status nginx` –∏–ª–∏ `systemctl status apache2`")
            analysis.append("   2. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ª–æ–≥–∏: `tail -f /var/log/nginx/error.log`")
            analysis.append("   3. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ø–æ—Ä—Ç–∞: `netstat -tlnp | grep :80` –∏–ª–∏ `netstat -tlnp | grep :443`")
            analysis.append("   4. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã: `openssl s_client -connect localhost:443`")
        elif 'tcp' in monitor_type:
            analysis.append("   1. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–∞: `systemctl status <service_name>`")
            analysis.append("   2. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ª–æ–≥–∏: `journalctl -u <service_name> -f`")
            analysis.append("   3. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ñ–∞–π—Ä–≤–æ–ª: `ufw status` –∏–ª–∏ `iptables -L`")
            analysis.append("   4. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–∞–Ω—è—Ç–æ—Å—Ç—å –ø–æ—Ä—Ç–∞: `lsof -i :<port>`")
        elif 'docker' in monitor_type or 'container' in monitor_type:
            analysis.append("   1. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞: `docker ps -a`")
            analysis.append("   2. –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ª–æ–≥–∏: `docker logs <container_name>`")
            analysis.append("   3. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–µ—Å—É—Ä—Å—ã: `docker stats <container_name>`")
            analysis.append("   4. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä: `docker restart <container_name>`")
        else:
            analysis.append("   1. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–∞: `systemctl status <service_name>`")
            analysis.append("   2. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ª–æ–≥–∏: `journalctl -u <service_name> -f`")
            analysis.append("   3. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ø–æ—Ä—Ç–∞: `netstat -tlnp | grep <port>`")
            analysis.append("   4. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–∏—Å: `systemctl restart <service_name>`")
        
        analysis.append("\nüìã **–î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –ü–†–û–í–ï–†–ö–ò:**")
        analysis.append("   ‚Ä¢ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ä–µ—Å—É—Ä—Å–æ–≤: `htop`, `iotop`, `df -h`")
        analysis.append("   ‚Ä¢ –°–µ—Ç–µ–≤—ã–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: `ss -tuln`, `netstat -i`")
        analysis.append("   ‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: `nginx -t`, `apache2ctl configtest`")
        analysis.append("   ‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞: `ls -la /path/to/service`")
        analysis.append("   ‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π: `systemctl list-dependencies <service>`")
        
        analysis.append("\nüöÄ **–ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò–ï –î–ï–ô–°–¢–í–ò–Ø:**")
        analysis.append("   ‚Ä¢ –ü–æ–ø—ã—Ç–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞: `systemctl restart <service>`")
        analysis.append("   ‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥ –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞")
        analysis.append("   ‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–∞–¥–µ–Ω–∏—è—Ö")
        
        analysis.append("\n‚ö†Ô∏è **–ü–†–ò–ú–ï–ß–ê–ù–ò–ï:** –≠—Ç–æ –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–∞–≤–∏–ª. –î–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ LLM –∞–≥–µ–Ω—Ç–∞.")
        
        return "\n".join(analysis)
        
    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞: {str(e)}"

async def generate_llm_incident_analysis(monitor_name: str, status: str, details: Dict[str, Any]) -> str:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º LLM"""
    try:
        if not LLM_AVAILABLE:
            print("‚ö†Ô∏è LLM –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑")
            return generate_basic_incident_analysis(monitor_name, status, details)
        
        # –ü–æ–ª—É—á–∞–µ–º LLM
        llm = get_gigachat()
        if llm is None:
            print("‚ö†Ô∏è LLM –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑")
            return generate_basic_incident_analysis(monitor_name, status, details)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è LLM
        prompt = f"""
–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ DevOps –∏ —Å–∏—Å—Ç–µ–º–Ω–æ–º—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—é. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–ª–µ–¥—É—é—â–∏–π –∏–Ω—Ü–∏–¥–µ–Ω—Ç –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑.

–ò–ù–¶–ò–î–ï–ù–¢:
- –ú–æ–Ω–∏—Ç–æ—Ä: {monitor_name}
- –°—Ç–∞—Ç—É—Å: {status}
- –¢–∏–ø –º–æ–Ω–∏—Ç–æ—Ä–∞: {details.get('monitor_type', 'unknown')}
- URL: {details.get('monitor_url', 'N/A')}
- –°–æ–æ–±—â–µ–Ω–∏–µ: {details.get('message', 'No message')}
- –í—Ä–µ–º—è: {details.get('datetime', 'N/A')}
- –•–æ—Å—Ç: {details.get('hostname', 'N/A')}
- –ü–æ—Ä—Ç: {details.get('port', 'N/A')}

–ü–†–û–í–ï–î–ò –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó:

1. **–ê–ù–ê–õ–ò–ó –ü–†–ò–ß–ò–ù** - –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞
2. **–î–ò–ê–ì–ù–û–°–¢–ò–ö–ê** - –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø—Ä–æ–±–ª–µ–º—ã
3. **–†–ï–®–ï–ù–ò–ï** - –ø–æ—à–∞–≥–æ–≤—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –ø–æ —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—é
4. **–ü–†–û–§–ò–õ–ê–ö–¢–ò–ö–ê** - –º–µ—Ä—ã –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è
5. **–û–¶–ï–ù–ö–ê –°–ï–†–¨–ï–ó–ù–û–°–¢–ò** - –∫—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç—å –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞ (low/medium/high/critical)

–ò—Å–ø–æ–ª—å–∑—É–π —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –æ–ø—ã—Ç –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏.
–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞: –∏—Å–ø–æ–ª—å–∑—É–π markdown —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏, —Å–ø–∏—Å–∫–∞–º–∏ –∏ –±–ª–æ–∫–∞–º–∏ –∫–æ–¥–∞.
"""
        
        print(f"ü§ñ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º LLM –∞–Ω–∞–ª–∏–∑ –¥–ª—è {monitor_name}...")
        
        # –í—ã–∑—ã–≤–∞–µ–º LLM
        try:
            response = llm.invoke(prompt)
            llm_analysis = response.content if hasattr(response, 'content') else str(response)
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∏–Ω—Ü–∏–¥–µ–Ω—Ç –≤ RAG
            incident_log = f"""
–ò–ù–¶–ò–î–ï–ù–¢ UPTIME KUMA (LLM –ê–ù–ê–õ–ò–ó):
–ú–æ–Ω–∏—Ç–æ—Ä: {monitor_name}
–°—Ç–∞—Ç—É—Å: {status}
–¢–∏–ø: {details.get('monitor_type', 'unknown')}
URL: {details.get('monitor_url', 'N/A')}
–°–æ–æ–±—â–µ–Ω–∏–µ: {details.get('message', 'No message')}
–í—Ä–µ–º—è: {details.get('datetime', 'N/A')}
LLM –ê–Ω–∞–ª–∏–∑: {llm_analysis[:500]}...
"""
            
            log_metadata = {
                "source": "uptime_kuma_webhook",
                "kind": "incident_analysis_llm",
                "monitor_name": monitor_name,
                "status": status,
                "monitor_type": details.get('monitor_type', 'unknown'),
                "timestamp": details.get('datetime', datetime.now().isoformat()),
                "analysis_type": "llm"
            }
            
            add_log_to_rag(incident_log, log_metadata)
            
            print(f"‚úÖ LLM –∞–Ω–∞–ª–∏–∑ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ RAG")
            return llm_analysis
            
        except Exception as llm_error:
            print(f"‚ùå –û—à–∏–±–∫–∞ LLM –∞–Ω–∞–ª–∏–∑–∞: {llm_error}, –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑")
            return generate_basic_incident_analysis(monitor_name, status, details)
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ LLM –∞–Ω–∞–ª–∏–∑–∞: {str(e)}")
        return generate_basic_incident_analysis(monitor_name, status, details)

@router.post("/webhook/uptime-kuma")
async def uptime_kuma_webhook(alert: UptimeAlert, request: Request):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–µ–±—Ö—É–∫–∞ –æ—Ç Uptime Kuma"""
    try:
        # –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ö–æ–¥—è—â–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
        print(f"üîç === –í–•–û–î–Ø–©–ò–ô WEBHOOK –û–¢ UPTIME KUMA ===")
        
        # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
        print(f"üìù –ó–∞–≥–æ–ª–æ–≤–∫–∏:")
        for header, value in request.headers.items():
            print(f"   - {header}: {value}")
        
        print(f"üìù –¢–∏–ø –¥–∞–Ω–Ω—ã—Ö: {type(alert)}")
        print(f"üìù –î–∞–Ω–Ω—ã–µ: {alert}")
        print(f"üìù JSON –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ: {alert.model_dump_json(indent=2)}")
        print(f"üìù –ê—Ç—Ä–∏–±—É—Ç—ã:")
        print(f"   - msg: {alert.msg}")
        print(f"   - monitorID: {alert.monitorID}")
        print(f"   - monitorName: {alert.monitorName}")
        print(f"   - monitorStatus: {alert.monitorStatus}")
        print(f"   - alertMessage: {alert.alertMessage}")
        print(f"   - alertType: {alert.alertType}")
        print(f"   - monitorType: {alert.monitorType}")
        print(f"   - monitorHostname: {alert.monitorHostname}")
        print(f"   - monitorPort: {alert.monitorPort}")
        print(f"   - heartbeat: {alert.heartbeat}")
        print(f"   - monitor: {alert.monitor}")
        print(f"üîç === –ö–û–ù–ï–¶ –õ–û–ì–ò–†–û–í–ê–ù–ò–Ø ===")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —ç—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ —Ä–µ–∞–ª—å–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        if alert.msg and "Testing" in alert.msg:
            # –≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç Uptime Kuma
            print(f"üß™ –ü–æ–ª—É—á–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç Uptime Kuma: {alert.msg}")
            
            return {
                "success": True,
                "message": "–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ",
                "test_message": alert.msg,
                "timestamp": datetime.now().isoformat()
            }
        
        # –≠—Ç–æ —Ä–µ–∞–ª—å–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ - –∏–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ heartbeat –∏ monitor
        monitor_name = None
        monitor_status = None
        monitor_type = None
        monitor_url = None
        monitor_hostname = None
        monitor_port = None
        alert_message = None
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ heartbeat
        if alert.heartbeat:
            heartbeat = alert.heartbeat
            monitor_status = heartbeat.get('status')  # 0 = down, 1 = up
            alert_message = heartbeat.get('msg')
            print(f"üìä –î–∞–Ω–Ω—ã–µ –∏–∑ heartbeat: status={monitor_status}, msg={alert_message}")
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ monitor
        if alert.monitor:
            monitor = alert.monitor
            monitor_name = monitor.get('name')
            monitor_type = monitor.get('type')
            monitor_url = monitor.get('url')
            monitor_hostname = monitor.get('hostname')
            monitor_port = monitor.get('port')
            print(f"üìä –î–∞–Ω–Ω—ã–µ –∏–∑ monitor: name={monitor_name}, type={monitor_type}, url={monitor_url}")
        
        # –ï—Å–ª–∏ –∏–º—è –º–æ–Ω–∏—Ç–æ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        if not monitor_name:
            monitor_name = alert.msg or "Unknown Monitor"
        
        # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, —Å–æ–∑–¥–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω–æ–µ
        if not alert_message:
            alert_message = f"Status changed to {monitor_status}" if monitor_status is not None else "Status changed"
        
        print(f"üîç –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: name={monitor_name}, status={monitor_status}, type={monitor_type}")
        
        # –õ–æ–≥–∏—Ä—É–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        print(f"üö® –ü–æ–ª—É—á–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç Uptime Kuma: {monitor_name} - {alert_message}")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        status_map = {0: "down", 1: "up", 2: "maintenance"}
        status = status_map.get(monitor_status, "unknown") if monitor_status is not None else "unknown"
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª–∏ –¥–ª—è –∞–≥–µ–Ω—Ç–∞
        details = {
            "monitor_name": monitor_name,
            "monitor_url": monitor_url or "N/A",
            "status": status,
            "alert_type": "status_change",
            "message": alert_message,
            "datetime": datetime.now().isoformat(),
            "monitor_type": monitor_type or "unknown",
            "hostname": monitor_hostname,
            "port": monitor_port
        }
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞ (–¥–ª—è –≤—Å–µ—Ö —Å—Ç–∞—Ç—É—Å–æ–≤)
        incident_analysis = ""
        if status in ["down", "error"]:
            print(f"üîç –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞...")
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º LLM –∞–Ω–∞–ª–∏–∑ –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
            incident_analysis = await generate_llm_incident_analysis(monitor_name, status, details)
            print(f"‚úÖ –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω")
        elif status == "up":
            print(f"‚úÖ –°–µ—Ä–≤–∏—Å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {monitor_name}")
            incident_analysis = f"üéâ **–°–ï–†–í–ò–° –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù: {monitor_name}**\n\n‚úÖ –°–µ—Ä–≤–∏—Å —Å–Ω–æ–≤–∞ –¥–æ—Å—Ç—É–ø–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.\n‚è∞ –í—Ä–µ–º—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"
        else:
            print(f"‚ÑπÔ∏è –°—Ç–∞—Ç—É—Å: {status} –¥–ª—è {monitor_name}")
            incident_analysis = f"‚ÑπÔ∏è **–ò–ó–ú–ï–ù–ï–ù–ò–ï –°–¢–ê–¢–£–°–ê: {monitor_name}**\n\nüìä –ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å: {status}\n‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤—Å–µ –∏–Ω—Ü–∏–¥–µ–Ω—Ç—ã –≤ RAG –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏
        try:
            if LLM_AVAILABLE:
                incident_log = f"""
–ò–ù–¶–ò–î–ï–ù–¢ UPTIME KUMA:
–ú–æ–Ω–∏—Ç–æ—Ä: {monitor_name}
–°—Ç–∞—Ç—É—Å: {status}
–¢–∏–ø: {monitor_type or 'unknown'}
URL: {monitor_url or 'N/A'}
–°–æ–æ–±—â–µ–Ω–∏–µ: {alert_message}
–í—Ä–µ–º—è: {datetime.now().isoformat()}
–ê–Ω–∞–ª–∏–∑: {incident_analysis[:500]}...
"""
                
                log_metadata = {
                    "source": "uptime_kuma_webhook",
                    "kind": "incident_analysis",
                    "monitor_name": monitor_name,
                    "status": status,
                    "monitor_type": monitor_type or 'unknown',
                    "timestamp": datetime.now().isoformat(),
                    "analysis_type": "llm" if status in ["down", "error"] else "basic"
                }
                
                add_log_to_rag(incident_log, log_metadata)
                print(f"‚úÖ –ò–Ω—Ü–∏–¥–µ–Ω—Ç –∑–∞–ø–∏—Å–∞–Ω –≤ RAG")
        except Exception as rag_error:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ RAG: {rag_error}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–∞ VPS —Å –∞–Ω–∞–ª–∏–∑–æ–º
        vps_response = await send_to_vps(monitor_name, status, details, incident_analysis)
        
        # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞ VPS
        if vps_response.get("success"):
            print(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ VPS")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞ VPS: {vps_response.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        return {
            "success": True,
            "message": "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ",
            "incident_analysis": incident_analysis,
            "vps_response": vps_response,
            "timestamp": datetime.now().isoformat()
        }
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–µ–±—Ö—É–∫–∞: {str(e)}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {str(e)}")

async def send_to_vps(service_name: str, status: str, details: Dict[str, Any], incident_analysis: str) -> Dict[str, Any]:
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–∞ VPS —Å –∞–Ω–∞–ª–∏–∑–æ–º –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞"""
    try:
        # –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
        alert_data = {
            "source": "homelab_uptime_kuma",
            "timestamp": datetime.now().isoformat(),
            "service": service_name,
            "status": status,
            "details": details,
            "host": os.environ.get("HOMELAB_HOST", "localhost"),
            "webhook_type": "uptime_kuma",
            "incident_analysis": incident_analysis,  # –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–∞–ª–∏–∑ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞
            "incident_severity": "high" if status in ["down", "error"] else "normal",
            "analysis_type": "llm" if status in ["down", "error"] else "basic"  # –£–∫–∞–∑—ã–≤–∞–µ–º —Ç–∏–ø –∞–Ω–∞–ª–∏–∑–∞
        }
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ VPS
        vps_url = os.environ.get("VPS_WEBHOOK_URL", "https://your_vps_domain.com/api/uptime-alerts")
        
        print(f"üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–∞ VPS: {vps_url}")
        print(f"üìã –î–∞–Ω–Ω—ã–µ: {json.dumps(alert_data, indent=2, ensure_ascii=False)}")
        
        response = requests.post(
            vps_url,
            json=alert_data,
            headers={"Content-Type": "application/json"},
            timeout=10
        )
        
        print(f"üì• –û—Ç–≤–µ—Ç –æ—Ç VPS: HTTP {response.status_code}")
        
        if response.status_code == 200:
            print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ VPS")
            return {"success": True, "message": "–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ VPS", "response": response.text}
        elif response.status_code == 404:
            print(f"‚ùå –≠–Ω–¥–ø–æ–∏–Ω—Ç –Ω–∞ VPS –Ω–µ –Ω–∞–π–¥–µ–Ω (404). –ü—Ä–æ–≤–µ—Ä—å—Ç–µ URL: {vps_url}")
            return {"success": False, "error": f"–≠–Ω–¥–ø–æ–∏–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω (404). –ü—Ä–æ–≤–µ—Ä—å—Ç–µ URL: {vps_url}"}
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞ VPS: HTTP {response.status_code}")
            print(f"üìÑ –û—Ç–≤–µ—Ç: {response.text}")
            return {"success": False, "error": f"HTTP {response.status_code}: {response.text}"}
            
    except requests.exceptions.Timeout:
        error_msg = "–¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞ VPS"
        print(f"‚è∞ {error_msg}")
        return {"success": False, "error": error_msg}
    except requests.exceptions.ConnectionError as e:
        error_msg = f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ VPS: {str(e)}"
        print(f"üîå {error_msg}")
        return {"success": False, "error": error_msg}
    except Exception as e:
        error_msg = f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞ VPS: {str(e)}"
        print(f"üí• {error_msg}")
        return {"success": False, "error": error_msg}

@router.get("/webhook/uptime-kuma/health")
async def webhook_health():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –≤–µ–±—Ö—É–∫–∞"""
    return {
        "status": "healthy",
        "service": "uptime-kuma-webhook"
    }

@router.post("/webhook/uptime-kuma/test-llm")
async def test_llm_analysis():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ LLM –∞–Ω–∞–ª–∏–∑–∞ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–æ–≤"""
    try:
        # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞
        test_details = {
            "monitor_name": "test-service",
            "monitor_url": "http://localhost:8080",
            "monitor_type": "http",
            "hostname": "localhost",
            "port": 8080,
            "message": "Connection timeout",
            "message": "Connection timeout",
            "datetime": datetime.now().isoformat()
        }
        
        print("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º LLM –∞–Ω–∞–ª–∏–∑...")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º LLM –∞–Ω–∞–ª–∏–∑
        incident_analysis = await generate_llm_incident_analysis("test-service", "down", test_details)
        
        return {
            "success": True,
            "message": "LLM –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω",
            "incident_analysis": incident_analysis,
            "timestamp": datetime.now().isoformat()
        }
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è LLM: {str(e)}")
        return {
            "success": False,
            "error": str(e),
            "timestamp": datetime.now().isoformat()
        }