"""
–í–µ–±—Ö—É–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ—Ç Uptime Kuma
"""

import os
import json
import requests
from datetime import datetime
from fastapi import APIRouter, Request, HTTPException
from pydantic import BaseModel
from typing import Dict, Any, Optional, Union

router = APIRouter()

class UptimeAlert(BaseModel):
    """–ú–æ–¥–µ–ª—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç Uptime Kuma"""
    monitorID: Optional[int] = None
    monitorURL: Optional[str] = None
    monitorName: Optional[str] = None
    monitorStatus: Optional[int] = None  # 0=down, 1=up, 2=maintenance
    alertType: Optional[str] = None
    alertMessage: Optional[str] = None
    alertDateTime: Optional[str] = None
    monitorType: Optional[str] = None
    monitorHostname: Optional[str] = None
    monitorPort: Optional[int] = None
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –¥–ª—è —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    heartbeat: Optional[Any] = None
    monitor: Optional[Any] = None
    msg: Optional[str] = None

@router.post("/webhook/uptime-kuma")
async def uptime_kuma_webhook(alert: UptimeAlert):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–µ–±—Ö—É–∫–∞ –æ—Ç Uptime Kuma"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —ç—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ —Ä–µ–∞–ª—å–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        if alert.msg and "Testing" in alert.msg:
            # –≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç Uptime Kuma
            print(f"üß™ –ü–æ–ª—É—á–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç Uptime Kuma: {alert.msg}")
            
            return {
                "success": True,
                "message": "–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ",
                "test_message": alert.msg,
                "timestamp": datetime.now().isoformat()
            }
        
        # –≠—Ç–æ —Ä–µ–∞–ª—å–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        if not alert.monitorName:
            # –ï—Å–ª–∏ –Ω–µ—Ç –∏–º–µ–Ω–∏ –º–æ–Ω–∏—Ç–æ—Ä–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω–æ–µ
            monitor_name = alert.msg or "Unknown Monitor"
        else:
            monitor_name = alert.monitorName
            
        if not alert.alertMessage:
            # –ï—Å–ª–∏ –Ω–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è, —Å–æ–∑–¥–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω–æ–µ
            alert_message = f"Status changed to {alert.monitorStatus}" if alert.monitorStatus is not None else "Status changed"
        else:
            alert_message = alert.alertMessage
        
        # –õ–æ–≥–∏—Ä—É–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        print(f"üö® –ü–æ–ª—É—á–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç Uptime Kuma: {monitor_name} - {alert_message}")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        status_map = {0: "down", 1: "up", 2: "maintenance"}
        status = status_map.get(alert.monitorStatus, "unknown") if alert.monitorStatus is not None else "unknown"
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª–∏ –¥–ª—è –∞–≥–µ–Ω—Ç–∞
        details = {
            "monitor_name": monitor_name,
            "monitor_url": alert.monitorURL or "N/A",
            "status": status,
            "alert_type": alert.alertType or "status_change",
            "message": alert_message,
            "datetime": alert.alertDateTime or datetime.now().isoformat(),
            "monitor_type": alert.monitorType or "unknown",
            "hostname": alert.monitorHostname,
            "port": alert.monitorPort
        }
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–∞ VPS
        vps_response = await send_to_vps(monitor_name, status, details)
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        return {
            "success": True,
            "message": "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ",
            "vps_response": vps_response,
            "timestamp": datetime.now().isoformat()
        }
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–µ–±—Ö—É–∫–∞: {str(e)}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {str(e)}")

async def send_to_vps(service_name: str, status: str, details: Dict[str, Any]) -> Dict[str, Any]:
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–∞ VPS"""
    try:
        # –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
        alert_data = {
            "source": "homelab_uptime_kuma",
            "timestamp": datetime.now().isoformat(),
            "service": service_name,
            "status": status,
            "details": details,
            "host": os.environ.get("HOMELAB_HOST", "localhost"),
            "webhook_type": "uptime_kuma"
        }
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ VPS
        vps_url = os.environ.get("VPS_WEBHOOK_URL", "https://your_vps_domain.com/api/uptime-alerts")
        
        response = requests.post(
            vps_url,
            json=alert_data,
            headers={"Content-Type": "application/json"},
            timeout=10
        )
        
        if response.status_code == 200:
            return {"success": True, "message": "–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ VPS"}
        else:
            return {"success": False, "error": f"HTTP {response.status_code}: {response.text}"}
            
    except Exception as e:
        return {"success": False, "error": str(e)}

@router.get("/webhook/uptime-kuma/health")
async def webhook_health():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –≤–µ–±—Ö—É–∫–∞"""
    return {
        "status": "healthy",
        "timestamp": datetime.now().isoformat(),
        "service": "uptime-kuma-webhook"
    }
