<?php
/**
 * Telegram Bot –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –¥–ª—è Homelab VPS
 * –¢–û–õ–¨–ö–û –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π - –Ω–∏–∫–∞–∫–∏—Ö –∫–æ–º–∞–Ω–¥!
 */

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram
 * @throws Exception
 */
function sendToTelegram($message): array
{
    if (empty(TELEGRAM_BOT_TOKEN) || empty(TELEGRAM_CHAT_ID)) {
        throw new Exception('Telegram bot not configured');
    }
    
    // –õ–æ–≥–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª–∏ –∑–∞–ø—Ä–æ—Å–∞ (–±–µ–∑ —Ç–æ–∫–µ–Ω–∞)
    error_log("Telegram API request - Chat ID: " . TELEGRAM_CHAT_ID . ", Message length: " . strlen($message));
    
    $url = "https://api.telegram.org/bot" . TELEGRAM_BOT_TOKEN . "/sendMessage";
    
    $data = [
        'chat_id' => TELEGRAM_CHAT_ID,
        'text' => $message,
        'parse_mode' => 'Markdown',
        'disable_web_page_preview' => true,
        'disable_notification' => false // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã
    ];
    
    $options = [
        'http' => [
            'method' => 'POST',
            'header' => 'Content-Type: application/x-www-form-urlencoded',
            'content' => http_build_query($data),
            'timeout' => REQUEST_TIMEOUT
        ]
    ];
    
    $context = stream_context_create($options);
    $result = file_get_contents($url, false, $context);
    
    if ($result === false) {
        $error = error_get_last();
        $errorMsg = $error ? $error['message'] : 'Unknown error';
        throw new Exception('Failed to send message to Telegram: ' . $errorMsg);
    }
    
    $response = json_decode($result, true);
    
    if (!$response['ok']) {
        $errorCode = $response['error_code'] ?? 'Unknown';
        $errorDescription = $response['description'] ?? 'Unknown error';
        throw new Exception("Telegram API error [{$errorCode}]: {$errorDescription}");
    }
    
    return [
        'message_id' => $response['result']['message_id'],
        'chat_id' => $response['result']['chat']['id'],
        'date' => $response['result']['date']
    ];
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏)
 */
function checkBotStatus(): array
{
    if (empty(TELEGRAM_BOT_TOKEN)) {
        return ['status' => 'error', 'message' => 'Bot token not configured'];
    }
    
    $url = "https://api.telegram.org/bot" . TELEGRAM_BOT_TOKEN . "/getMe";
    
    $result = file_get_contents($url);
    if ($result === false) {
        return ['status' => 'error', 'message' => 'Failed to connect to Telegram API'];
    }
    
    $response = json_decode($result, true);
    
    if (!$response['ok']) {
        return ['status' => 'error', 'message' => 'Telegram API error: ' . ($response['description'] ?? 'Unknown error')];
    }
    
    return [
        'status' => 'success',
        'bot_info' => [
            'id' => $response['result']['id'],
            'name' => $response['result']['first_name'],
            'username' => $response['result']['username']
        ]
    ];
}

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —á–∞—Å—Ç—è–º–∏ —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
 */
function sendLongMessage($message, $maxLength = 4000): array
{
    if (strlen($message) <= $maxLength) {
        return sendToTelegram($message);
    }
    
    // –†–∞–∑–±–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —á–∞—Å—Ç–∏
    $parts = [];
    $lines = explode("\n", $message);
    $currentPart = '';
    
    foreach ($lines as $line) {
        if (strlen($currentPart . $line . "\n") > $maxLength) {
            if (!empty($currentPart)) {
                $parts[] = trim($currentPart);
                $currentPart = $line . "\n";
            } else {
                // –ï—Å–ª–∏ –æ–¥–Ω–∞ —Å—Ç—Ä–æ–∫–∞ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–∞—è, –æ–±—Ä–µ–∑–∞–µ–º –µ—ë
                $parts[] = substr($line, 0, $maxLength - 3) . '...';
            }
        } else {
            $currentPart .= $line . "\n";
        }
    }
    
    if (!empty($currentPart)) {
        $parts[] = trim($currentPart);
    }
    
    $results = [];
    $totalParts = count($parts);
    
    foreach ($parts as $index => $part) {
        $partMessage = $part;
        if ($totalParts > 1) {
            $partMessage = "üìÑ **–ß–∞—Å—Ç—å " . ($index + 1) . "/" . $totalParts . "**\n\n" . $part;
        }
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–∞—Å—Ç—å
        $results[] = sendToTelegram($partMessage);
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –º–µ–∂–¥—É —á–∞—Å—Ç—è–º–∏ (–∫—Ä–æ–º–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π)
        if ($index < $totalParts - 1) {
            sleep(1); // 1 —Å–µ–∫—É–Ω–¥–∞ –∑–∞–¥–µ—Ä–∂–∫–∏
        }
    }
    
    return $results;
}

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —É–º–Ω–æ–π —Ä–∞–∑–±–∏–≤–∫–æ–π –ø–æ —Å–º—ã—Å–ª–æ–≤—ã–º –±–ª–æ–∫–∞–º
 */
function sendSmartLongMessage($message, $maxLength = 4000): array
{
    if (strlen($message) <= $maxLength) {
        return sendToTelegram($message);
    }
    
    // –†–∞–∑–±–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ —Å–º—ã—Å–ª–æ–≤—ã–º –±–ª–æ–∫–∞–º
    $parts = [];
    $sections = preg_split('/(\n\*\*[^*]+\*\*:?\n)/', $message, -1, PREG_SPLIT_DELIM_CAPTURE);
    
    $currentPart = '';
    $sectionIndex = 0;
    
    while ($sectionIndex < count($sections)) {
        $section = $sections[$sectionIndex];
        
        // –ï—Å–ª–∏ —ç—Ç–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å–µ–∫—Ü–∏–∏
        if (preg_match('/\n\*\*[^*]+\*\*:?\n/', $section)) {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–º–µ—Å—Ç–∏—Ç—Å—è –ª–∏ –∑–∞–≥–æ–ª–æ–≤–æ–∫ + —Å–ª–µ–¥—É—é—â–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç
            $nextContent = isset($sections[$sectionIndex + 1]) ? $sections[$sectionIndex + 1] : '';
            
            if (strlen($currentPart . $section . $nextContent) > $maxLength) {
                if (!empty($currentPart)) {
                    $parts[] = trim($currentPart);
                    $currentPart = $section . $nextContent;
                } else {
                    $currentPart = $section . $nextContent;
                }
                $sectionIndex += 2; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –∫–æ–Ω—Ç–µ–Ω—Ç
            } else {
                $currentPart .= $section . $nextContent;
                $sectionIndex += 2; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –∫–æ–Ω—Ç–µ–Ω—Ç
            }
        } else {
            $currentPart .= $section;
            $sectionIndex++;
        }
        
        // –ï—Å–ª–∏ —Ç–µ–∫—É—â–∞—è —á–∞—Å—Ç—å —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–∞—è, –æ–±—Ä–µ–∑–∞–µ–º –µ—ë
        if (strlen($currentPart) > $maxLength) {
            $parts[] = substr($currentPart, 0, $maxLength - 3) . '...';
            $currentPart = '';
        }
    }
    
    if (!empty($currentPart)) {
        $parts[] = trim($currentPart);
    }
    
    $results = [];
    $totalParts = count($parts);
    
    foreach ($parts as $index => $part) {
        $partMessage = $part;
        if ($totalParts > 1) {
            $partMessage = "üìÑ **–ß–∞—Å—Ç—å " . ($index + 1) . "/" . $totalParts . "**\n\n" . $part;
        }
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–∞—Å—Ç—å
        $results[] = sendToTelegram($partMessage);
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –º–µ–∂–¥—É —á–∞—Å—Ç—è–º–∏ (–∫—Ä–æ–º–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π)
        if ($index < $totalParts - 1) {
            sleep(1); // 1 —Å–µ–∫—É–Ω–¥–∞ –∑–∞–¥–µ—Ä–∂–∫–∏
        }
    }
    
    return $results;
}

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (—Ç–æ–ª—å–∫–æ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏)
 */
function sendTestMessage(): array
{
    try {
        $testMessage = "üß™ **TEST MESSAGE** üß™\n\n";
        $testMessage .= "**Service:** Homelab VPS\n";
        $testMessage .= "**Status:** Test\n";
        $testMessage .= "**Host:** VPS Server\n";
        $testMessage .= "**Time:** " . date('Y-m-d H:i:s T') . "\n\n";
        $testMessage .= "–ï—Å–ª–∏ –≤—ã –≤–∏–¥–∏—Ç–µ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∑–Ω–∞—á–∏—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç! ‚úÖ";
        
        $result = sendToTelegram($testMessage);
        
        return [
            'status' => 'success',
            'message' => 'Test message sent successfully',
            'telegram_response' => $result
        ];
        
    } catch (Exception $e) {
        return [
            'status' => 'error',
            'message' => 'Failed to send test message: ' . $e->getMessage()
        ];
    }
}
